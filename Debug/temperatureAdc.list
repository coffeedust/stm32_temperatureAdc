
temperatureAdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004474  08004474  00014474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004538  08004538  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004538  08004538  00014538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004540  08004540  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004540  08004540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004544  08004544  00014544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000070  080045b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  080045b8  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a81f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c26  00000000  00000000  0002a8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0002c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e8  00000000  00000000  0002cd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001785e  00000000  00000000  0002d570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aeaa  00000000  00000000  00044dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092bb5  00000000  00000000  0004fc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e282d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029dc  00000000  00000000  000e2880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800445c 	.word	0x0800445c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800445c 	.word	0x0800445c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fb27 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f825 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f8fd 	bl	8000790 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000596:	f000 f87f 	bl	8000698 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800059a:	f000 f8cf 	bl	800073c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  initUart();
 800059e:	f000 faa1 	bl	8000ae4 <initUart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	HAL_ADC_Start(&hadc1);
 80005a2:	480c      	ldr	r0, [pc, #48]	; (80005d4 <main+0x50>)
 80005a4:	f000 fbf4 	bl	8000d90 <HAL_ADC_Start>
  	HAL_ADC_PollForConversion(&hadc1, 1);
 80005a8:	2101      	movs	r1, #1
 80005aa:	480a      	ldr	r0, [pc, #40]	; (80005d4 <main+0x50>)
 80005ac:	f000 fcd7 	bl	8000f5e <HAL_ADC_PollForConversion>
  	uint16_t value = HAL_ADC_GetValue(&hadc1);
 80005b0:	4808      	ldr	r0, [pc, #32]	; (80005d4 <main+0x50>)
 80005b2:	f000 fd5f 	bl	8001074 <HAL_ADC_GetValue>
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
  	HAL_ADC_Stop(&hadc1);
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <main+0x50>)
 80005bc:	f000 fc9c 	bl	8000ef8 <HAL_ADC_Stop>

  	printf("Temperature = %d\n", value);
 80005c0:	88fb      	ldrh	r3, [r7, #6]
 80005c2:	4619      	mov	r1, r3
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <main+0x54>)
 80005c6:	f002 ffbb 	bl	8003540 <iprintf>
  	HAL_Delay(100);
 80005ca:	2064      	movs	r0, #100	; 0x64
 80005cc:	f000 fb78 	bl	8000cc0 <HAL_Delay>
  {
 80005d0:	e7e7      	b.n	80005a2 <main+0x1e>
 80005d2:	bf00      	nop
 80005d4:	2000008c 	.word	0x2000008c
 80005d8:	08004474 	.word	0x08004474

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 ffa0 	bl	8003530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <SystemClock_Config+0xb4>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <SystemClock_Config+0xb4>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <SystemClock_Config+0xb4>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <SystemClock_Config+0xb8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <SystemClock_Config+0xb8>)
 8000626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b19      	ldr	r3, [pc, #100]	; (8000694 <SystemClock_Config+0xb8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000644:	2300      	movs	r3, #0
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fa75 	bl	8001b3c <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000658:	f000 f8b4 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fcd8 	bl	800202c <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000682:	f000 f89f 	bl	80007c4 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	; 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800069e:	463b      	mov	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006aa:	4b21      	ldr	r3, [pc, #132]	; (8000730 <MX_ADC1_Init+0x98>)
 80006ac:	4a21      	ldr	r2, [pc, #132]	; (8000734 <MX_ADC1_Init+0x9c>)
 80006ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <MX_ADC1_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b6:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <MX_ADC1_Init+0x98>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_ADC1_Init+0x98>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006c2:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_ADC1_Init+0x98>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c8:	4b19      	ldr	r3, [pc, #100]	; (8000730 <MX_ADC1_Init+0x98>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_ADC1_Init+0x98>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_ADC1_Init+0x98>)
 80006d8:	4a17      	ldr	r2, [pc, #92]	; (8000738 <MX_ADC1_Init+0xa0>)
 80006da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_ADC1_Init+0x98>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006e2:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_ADC1_Init+0x98>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_ADC1_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_ADC1_Init+0x98>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f6:	480e      	ldr	r0, [pc, #56]	; (8000730 <MX_ADC1_Init+0x98>)
 80006f8:	f000 fb06 	bl	8000d08 <HAL_ADC_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000702:	f000 f85f 	bl	80007c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800070a:	2301      	movs	r3, #1
 800070c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000712:	463b      	mov	r3, r7
 8000714:	4619      	mov	r1, r3
 8000716:	4806      	ldr	r0, [pc, #24]	; (8000730 <MX_ADC1_Init+0x98>)
 8000718:	f000 fcba 	bl	8001090 <HAL_ADC_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000722:	f000 f84f 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000008c 	.word	0x2000008c
 8000734:	40012000 	.word	0x40012000
 8000738:	0f000001 	.word	0x0f000001

0800073c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_USART1_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000774:	f001 fe3a 	bl	80023ec <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f821 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000d4 	.word	0x200000d4
 800078c:	40011000 	.word	0x40011000

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_GPIO_Init+0x30>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <MX_GPIO_Init+0x30>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_GPIO_Init+0x30>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x8>
	...

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	4a0f      	ldr	r2, [pc, #60]	; (800081c <HAL_MspInit+0x4c>)
 80007e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e4:	6453      	str	r3, [r2, #68]	; 0x44
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <HAL_MspInit+0x4c>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a08      	ldr	r2, [pc, #32]	; (800081c <HAL_MspInit+0x4c>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_MspInit+0x4c>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a17      	ldr	r2, [pc, #92]	; (800089c <HAL_ADC_MspInit+0x7c>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d127      	bne.n	8000892 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <HAL_ADC_MspInit+0x80>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <HAL_ADC_MspInit+0x80>)
 800084c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000850:	6453      	str	r3, [r2, #68]	; 0x44
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <HAL_ADC_MspInit+0x80>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_ADC_MspInit+0x80>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <HAL_ADC_MspInit+0x80>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <HAL_ADC_MspInit+0x80>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800087a:	2301      	movs	r3, #1
 800087c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	; (80008a4 <HAL_ADC_MspInit+0x84>)
 800088e:	f000 ffd1 	bl	8001834 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	; 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40012000 	.word	0x40012000
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020000 	.word	0x40020000

080008a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a1d      	ldr	r2, [pc, #116]	; (800093c <HAL_UART_MspInit+0x94>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d134      	bne.n	8000934 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <HAL_UART_MspInit+0x98>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	4a1b      	ldr	r2, [pc, #108]	; (8000940 <HAL_UART_MspInit+0x98>)
 80008d4:	f043 0310 	orr.w	r3, r3, #16
 80008d8:	6453      	str	r3, [r2, #68]	; 0x44
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <HAL_UART_MspInit+0x98>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	f003 0310 	and.w	r3, r3, #16
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_UART_MspInit+0x98>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a14      	ldr	r2, [pc, #80]	; (8000940 <HAL_UART_MspInit+0x98>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_UART_MspInit+0x98>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000902:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000910:	2303      	movs	r3, #3
 8000912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000914:	2307      	movs	r3, #7
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4809      	ldr	r0, [pc, #36]	; (8000944 <HAL_UART_MspInit+0x9c>)
 8000920:	f000 ff88 	bl	8001834 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2025      	movs	r0, #37	; 0x25
 800092a:	f000 feba 	bl	80016a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800092e:	2025      	movs	r0, #37	; 0x25
 8000930:	f000 fed3 	bl	80016da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	; 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40011000 	.word	0x40011000
 8000940:	40023800 	.word	0x40023800
 8000944:	40020000 	.word	0x40020000

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <MemManage_Handler+0x4>

0800095a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <UsageFault_Handler+0x4>

08000966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000994:	f000 f974 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <USART1_IRQHandler+0x10>)
 80009a2:	f001 fe33 	bl	800260c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200000d4 	.word	0x200000d4

080009b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	e00a      	b.n	80009d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009c2:	f3af 8000 	nop.w
 80009c6:	4601      	mov	r1, r0
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	60ba      	str	r2, [r7, #8]
 80009ce:	b2ca      	uxtb	r2, r1
 80009d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	3301      	adds	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	429a      	cmp	r2, r3
 80009de:	dbf0      	blt.n	80009c2 <_read+0x12>
  }

  return len;
 80009e0:	687b      	ldr	r3, [r7, #4]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <_close>:
  }
  return len;
}

int _close(int file)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a12:	605a      	str	r2, [r3, #4]
  return 0;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <_isatty>:

int _isatty(int file)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a2a:	2301      	movs	r3, #1
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <_sbrk+0x5c>)
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <_sbrk+0x60>)
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <_sbrk+0x64>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <_sbrk+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d207      	bcs.n	8000a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a84:	f002 fd2a 	bl	80034dc <__errno>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	e009      	b.n	8000aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <_sbrk+0x64>)
 8000aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20020000 	.word	0x20020000
 8000ab4:	00000400 	.word	0x00000400
 8000ab8:	20000118 	.word	0x20000118
 8000abc:	20000238 	.word	0x20000238

08000ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <initUart>:
int rxBufferPp;					// put pointer (write)
uint8_t rxBuffer[rxBufferMax];
uint8_t rxChar;

// uart 장치 초기화
void initUart() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &rxChar, 1);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4903      	ldr	r1, [pc, #12]	; (8000af8 <initUart+0x14>)
 8000aec:	4803      	ldr	r0, [pc, #12]	; (8000afc <initUart+0x18>)
 8000aee:	f001 fd5c 	bl	80025aa <HAL_UART_Receive_IT>
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000021f 	.word	0x2000021f
 8000afc:	200000d4 	.word	0x200000d4

08000b00 <HAL_UART_RxCpltCallback>:

// 문자수신 처리
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	rxBuffer[rxBufferPp++] = rxChar;
 8000b08:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <HAL_UART_RxCpltCallback+0x4c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	1c5a      	adds	r2, r3, #1
 8000b0e:	490f      	ldr	r1, [pc, #60]	; (8000b4c <HAL_UART_RxCpltCallback+0x4c>)
 8000b10:	600a      	str	r2, [r1, #0]
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_UART_RxCpltCallback+0x50>)
 8000b14:	7811      	ldrb	r1, [r2, #0]
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <HAL_UART_RxCpltCallback+0x54>)
 8000b18:	54d1      	strb	r1, [r2, r3]
	rxBufferPp %= rxBufferMax;
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <HAL_UART_RxCpltCallback+0x4c>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_UART_RxCpltCallback+0x58>)
 8000b20:	fb83 1302 	smull	r1, r3, r3, r2
 8000b24:	4413      	add	r3, r2
 8000b26:	11d9      	asrs	r1, r3, #7
 8000b28:	17d3      	asrs	r3, r2, #31
 8000b2a:	1ac9      	subs	r1, r1, r3
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	021b      	lsls	r3, r3, #8
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	1ad1      	subs	r1, r2, r3
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_UART_RxCpltCallback+0x4c>)
 8000b36:	6019      	str	r1, [r3, #0]
	HAL_UART_Receive_IT(&huart1, &rxChar, 1);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	4905      	ldr	r1, [pc, #20]	; (8000b50 <HAL_UART_RxCpltCallback+0x50>)
 8000b3c:	4807      	ldr	r0, [pc, #28]	; (8000b5c <HAL_UART_RxCpltCallback+0x5c>)
 8000b3e:	f001 fd34 	bl	80025aa <HAL_UART_Receive_IT>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000011c 	.word	0x2000011c
 8000b50:	2000021f 	.word	0x2000021f
 8000b54:	20000120 	.word	0x20000120
 8000b58:	80808081 	.word	0x80808081
 8000b5c:	200000d4 	.word	0x200000d4

08000b60 <_write>:
	result = rxBuffer[rxBufferGp++];
	rxBufferGp %= rxBufferMax;
	return result;
}

int _write(int file, char *p, int len) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, p, len, 1);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	2301      	movs	r3, #1
 8000b72:	68b9      	ldr	r1, [r7, #8]
 8000b74:	4803      	ldr	r0, [pc, #12]	; (8000b84 <_write+0x24>)
 8000b76:	f001 fc86 	bl	8002486 <HAL_UART_Transmit>
	return len;
 8000b7a:	687b      	ldr	r3, [r7, #4]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000d4 	.word	0x200000d4

08000b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b8e:	490e      	ldr	r1, [pc, #56]	; (8000bc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba4:	4c0b      	ldr	r4, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bb2:	f7ff ff85 	bl	8000ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f002 fc97 	bl	80034e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bba:	f7ff fce3 	bl	8000584 <main>
  bx  lr    
 8000bbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bcc:	08004548 	.word	0x08004548
  ldr r2, =_sbss
 8000bd0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bd4:	20000234 	.word	0x20000234

08000bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <HAL_Init+0x40>)
 8000be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <HAL_Init+0x40>)
 8000bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_Init+0x40>)
 8000bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 fd41 	bl	800168c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0a:	200f      	movs	r0, #15
 8000c0c:	f000 f808 	bl	8000c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c10:	f7ff fdde 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023c00 	.word	0x40023c00

08000c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_InitTick+0x54>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x58>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 fd59 	bl	80016f6 <HAL_SYSTICK_Config>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e00e      	b.n	8000c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d80a      	bhi.n	8000c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f000 fd21 	bl	80016a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c60:	4a06      	ldr	r2, [pc, #24]	; (8000c7c <HAL_InitTick+0x5c>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e000      	b.n	8000c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000004 	.word	0x20000004

08000c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000220 	.word	0x20000220

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000220 	.word	0x20000220

08000cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc8:	f7ff ffee 	bl	8000ca8 <HAL_GetTick>
 8000ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd8:	d005      	beq.n	8000ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <HAL_Delay+0x44>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ce6:	bf00      	nop
 8000ce8:	f7ff ffde 	bl	8000ca8 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d8f7      	bhi.n	8000ce8 <HAL_Delay+0x28>
  {
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008

08000d08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e033      	b.n	8000d86 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d109      	bne.n	8000d3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff fd7a 	bl	8000820 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f003 0310 	and.w	r3, r3, #16
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d118      	bne.n	8000d78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d4e:	f023 0302 	bic.w	r3, r3, #2
 8000d52:	f043 0202 	orr.w	r2, r3, #2
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f000 faca 	bl	80012f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f023 0303 	bic.w	r3, r3, #3
 8000d6e:	f043 0201 	orr.w	r2, r3, #1
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	641a      	str	r2, [r3, #64]	; 0x40
 8000d76:	e001      	b.n	8000d7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d101      	bne.n	8000daa <HAL_ADC_Start+0x1a>
 8000da6:	2302      	movs	r3, #2
 8000da8:	e097      	b.n	8000eda <HAL_ADC_Start+0x14a>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2201      	movs	r2, #1
 8000dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d018      	beq.n	8000df2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f042 0201 	orr.w	r2, r2, #1
 8000dce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000dd0:	4b45      	ldr	r3, [pc, #276]	; (8000ee8 <HAL_ADC_Start+0x158>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a45      	ldr	r2, [pc, #276]	; (8000eec <HAL_ADC_Start+0x15c>)
 8000dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dda:	0c9a      	lsrs	r2, r3, #18
 8000ddc:	4613      	mov	r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4413      	add	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000de4:	e002      	b.n	8000dec <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	3b01      	subs	r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f9      	bne.n	8000de6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d15f      	bne.n	8000ec0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e08:	f023 0301 	bic.w	r3, r3, #1
 8000e0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d007      	beq.n	8000e32 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e3e:	d106      	bne.n	8000e4e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e44:	f023 0206 	bic.w	r2, r3, #6
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	645a      	str	r2, [r3, #68]	; 0x44
 8000e4c:	e002      	b.n	8000e54 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e5c:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <HAL_ADC_Start+0x160>)
 8000e5e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e68:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 031f 	and.w	r3, r3, #31
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10f      	bne.n	8000e96 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d129      	bne.n	8000ed8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	e020      	b.n	8000ed8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a16      	ldr	r2, [pc, #88]	; (8000ef4 <HAL_ADC_Start+0x164>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d11b      	bne.n	8000ed8 <HAL_ADC_Start+0x148>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d114      	bne.n	8000ed8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	e00b      	b.n	8000ed8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f043 0210 	orr.w	r2, r3, #16
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed0:	f043 0201 	orr.w	r2, r3, #1
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	431bde83 	.word	0x431bde83
 8000ef0:	40012300 	.word	0x40012300
 8000ef4:	40012000 	.word	0x40012000

08000ef8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d101      	bne.n	8000f0e <HAL_ADC_Stop+0x16>
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	e021      	b.n	8000f52 <HAL_ADC_Stop+0x5a>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 0201 	bic.w	r2, r2, #1
 8000f24:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d109      	bne.n	8000f48 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f3c:	f023 0301 	bic.w	r3, r3, #1
 8000f40:	f043 0201 	orr.w	r2, r3, #1
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b084      	sub	sp, #16
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7a:	d113      	bne.n	8000fa4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f8a:	d10b      	bne.n	8000fa4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	f043 0220 	orr.w	r2, r3, #32
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e063      	b.n	800106c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000fa4:	f7ff fe80 	bl	8000ca8 <HAL_GetTick>
 8000fa8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000faa:	e021      	b.n	8000ff0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb2:	d01d      	beq.n	8000ff0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d007      	beq.n	8000fca <HAL_ADC_PollForConversion+0x6c>
 8000fba:	f7ff fe75 	bl	8000ca8 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d212      	bcs.n	8000ff0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d00b      	beq.n	8000ff0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	f043 0204 	orr.w	r2, r3, #4
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e03d      	b.n	800106c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d1d6      	bne.n	8000fac <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f06f 0212 	mvn.w	r2, #18
 8001006:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d123      	bne.n	800106a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001026:	2b00      	cmp	r3, #0
 8001028:	d11f      	bne.n	800106a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001034:	2b00      	cmp	r3, #0
 8001036:	d006      	beq.n	8001046 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001042:	2b00      	cmp	r3, #0
 8001044:	d111      	bne.n	800106a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d105      	bne.n	800106a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f043 0201 	orr.w	r2, r3, #1
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d101      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x1c>
 80010a8:	2302      	movs	r3, #2
 80010aa:	e113      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x244>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b09      	cmp	r3, #9
 80010ba:	d925      	bls.n	8001108 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68d9      	ldr	r1, [r3, #12]
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	461a      	mov	r2, r3
 80010ca:	4613      	mov	r3, r2
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	4413      	add	r3, r2
 80010d0:	3b1e      	subs	r3, #30
 80010d2:	2207      	movs	r2, #7
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43da      	mvns	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	400a      	ands	r2, r1
 80010e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68d9      	ldr	r1, [r3, #12]
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	4603      	mov	r3, r0
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4403      	add	r3, r0
 80010fa:	3b1e      	subs	r3, #30
 80010fc:	409a      	lsls	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	430a      	orrs	r2, r1
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	e022      	b.n	800114e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6919      	ldr	r1, [r3, #16]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	b29b      	uxth	r3, r3
 8001114:	461a      	mov	r2, r3
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	2207      	movs	r2, #7
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	400a      	ands	r2, r1
 800112a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6919      	ldr	r1, [r3, #16]
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	b29b      	uxth	r3, r3
 800113c:	4618      	mov	r0, r3
 800113e:	4603      	mov	r3, r0
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4403      	add	r3, r0
 8001144:	409a      	lsls	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	430a      	orrs	r2, r1
 800114c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b06      	cmp	r3, #6
 8001154:	d824      	bhi.n	80011a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	3b05      	subs	r3, #5
 8001168:	221f      	movs	r2, #31
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43da      	mvns	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	400a      	ands	r2, r1
 8001176:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	b29b      	uxth	r3, r3
 8001184:	4618      	mov	r0, r3
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	3b05      	subs	r3, #5
 8001192:	fa00 f203 	lsl.w	r2, r0, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	430a      	orrs	r2, r1
 800119c:	635a      	str	r2, [r3, #52]	; 0x34
 800119e:	e04c      	b.n	800123a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b0c      	cmp	r3, #12
 80011a6:	d824      	bhi.n	80011f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	3b23      	subs	r3, #35	; 0x23
 80011ba:	221f      	movs	r2, #31
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43da      	mvns	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	400a      	ands	r2, r1
 80011c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	4613      	mov	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	3b23      	subs	r3, #35	; 0x23
 80011e4:	fa00 f203 	lsl.w	r2, r0, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	430a      	orrs	r2, r1
 80011ee:	631a      	str	r2, [r3, #48]	; 0x30
 80011f0:	e023      	b.n	800123a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	3b41      	subs	r3, #65	; 0x41
 8001204:	221f      	movs	r2, #31
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	400a      	ands	r2, r1
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	b29b      	uxth	r3, r3
 8001220:	4618      	mov	r0, r3
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	3b41      	subs	r3, #65	; 0x41
 800122e:	fa00 f203 	lsl.w	r2, r0, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800123a:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <HAL_ADC_ConfigChannel+0x250>)
 800123c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a28      	ldr	r2, [pc, #160]	; (80012e4 <HAL_ADC_ConfigChannel+0x254>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d10f      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x1d8>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b12      	cmp	r3, #18
 800124e:	d10b      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a1d      	ldr	r2, [pc, #116]	; (80012e4 <HAL_ADC_ConfigChannel+0x254>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d12b      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x23a>
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <HAL_ADC_ConfigChannel+0x258>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d003      	beq.n	8001284 <HAL_ADC_ConfigChannel+0x1f4>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b11      	cmp	r3, #17
 8001282:	d122      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <HAL_ADC_ConfigChannel+0x258>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d111      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_ADC_ConfigChannel+0x25c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <HAL_ADC_ConfigChannel+0x260>)
 80012ac:	fba2 2303 	umull	r2, r3, r2, r3
 80012b0:	0c9a      	lsrs	r2, r3, #18
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012bc:	e002      	b.n	80012c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f9      	bne.n	80012be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	40012300 	.word	0x40012300
 80012e4:	40012000 	.word	0x40012000
 80012e8:	10000012 	.word	0x10000012
 80012ec:	20000000 	.word	0x20000000
 80012f0:	431bde83 	.word	0x431bde83

080012f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012fc:	4b79      	ldr	r3, [pc, #484]	; (80014e4 <ADC_Init+0x1f0>)
 80012fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	431a      	orrs	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001328:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6859      	ldr	r1, [r3, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	021a      	lsls	r2, r3, #8
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800134c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6859      	ldr	r1, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800136e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6899      	ldr	r1, [r3, #8]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001386:	4a58      	ldr	r2, [pc, #352]	; (80014e8 <ADC_Init+0x1f4>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d022      	beq.n	80013d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800139a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6899      	ldr	r1, [r3, #8]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6899      	ldr	r1, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	e00f      	b.n	80013f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0202 	bic.w	r2, r2, #2
 8001400:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6899      	ldr	r1, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7e1b      	ldrb	r3, [r3, #24]
 800140c:	005a      	lsls	r2, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 3020 	ldrb.w	r3, [r3, #32]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d01b      	beq.n	8001458 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800142e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800143e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6859      	ldr	r1, [r3, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	3b01      	subs	r3, #1
 800144c:	035a      	lsls	r2, r3, #13
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	e007      	b.n	8001468 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001466:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	3b01      	subs	r3, #1
 8001484:	051a      	lsls	r2, r3, #20
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800149c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6899      	ldr	r1, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014aa:	025a      	lsls	r2, r3, #9
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6899      	ldr	r1, [r3, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	029a      	lsls	r2, r3, #10
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	609a      	str	r2, [r3, #8]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	40012300 	.word	0x40012300
 80014e8:	0f000001 	.word	0x0f000001

080014ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001508:	4013      	ands	r3, r2
 800150a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151e:	4a04      	ldr	r2, [pc, #16]	; (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	60d3      	str	r3, [r2, #12]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <__NVIC_GetPriorityGrouping+0x18>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	f003 0307 	and.w	r3, r3, #7
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	db0b      	blt.n	800157a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f003 021f 	and.w	r2, r3, #31
 8001568:	4907      	ldr	r1, [pc, #28]	; (8001588 <__NVIC_EnableIRQ+0x38>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	2001      	movs	r0, #1
 8001572:	fa00 f202 	lsl.w	r2, r0, r2
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000e100 	.word	0xe000e100

0800158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db0a      	blt.n	80015b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	490c      	ldr	r1, [pc, #48]	; (80015d8 <__NVIC_SetPriority+0x4c>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	0112      	lsls	r2, r2, #4
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	440b      	add	r3, r1
 80015b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b4:	e00a      	b.n	80015cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4908      	ldr	r1, [pc, #32]	; (80015dc <__NVIC_SetPriority+0x50>)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	3b04      	subs	r3, #4
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	440b      	add	r3, r1
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f1c3 0307 	rsb	r3, r3, #7
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	bf28      	it	cs
 80015fe:	2304      	movcs	r3, #4
 8001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3304      	adds	r3, #4
 8001606:	2b06      	cmp	r3, #6
 8001608:	d902      	bls.n	8001610 <NVIC_EncodePriority+0x30>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3b03      	subs	r3, #3
 800160e:	e000      	b.n	8001612 <NVIC_EncodePriority+0x32>
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	f04f 32ff 	mov.w	r2, #4294967295
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	401a      	ands	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43d9      	mvns	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	4313      	orrs	r3, r2
         );
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	; 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001658:	d301      	bcc.n	800165e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165a:	2301      	movs	r3, #1
 800165c:	e00f      	b.n	800167e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <SysTick_Config+0x40>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001666:	210f      	movs	r1, #15
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f7ff ff8e 	bl	800158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <SysTick_Config+0x40>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <SysTick_Config+0x40>)
 8001678:	2207      	movs	r2, #7
 800167a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	e000e010 	.word	0xe000e010

0800168c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff29 	bl	80014ec <__NVIC_SetPriorityGrouping>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b4:	f7ff ff3e 	bl	8001534 <__NVIC_GetPriorityGrouping>
 80016b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff ff8e 	bl	80015e0 <NVIC_EncodePriority>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff5d 	bl	800158c <__NVIC_SetPriority>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff31 	bl	8001550 <__NVIC_EnableIRQ>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffa2 	bl	8001648 <SysTick_Config>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff fac4 	bl	8000ca8 <HAL_GetTick>
 8001720:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d008      	beq.n	8001740 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2280      	movs	r2, #128	; 0x80
 8001732:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e052      	b.n	80017e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0216 	bic.w	r2, r2, #22
 800174e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	695a      	ldr	r2, [r3, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800175e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	2b00      	cmp	r3, #0
 8001766:	d103      	bne.n	8001770 <HAL_DMA_Abort+0x62>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800176c:	2b00      	cmp	r3, #0
 800176e:	d007      	beq.n	8001780 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0208 	bic.w	r2, r2, #8
 800177e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0201 	bic.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001790:	e013      	b.n	80017ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001792:	f7ff fa89 	bl	8000ca8 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b05      	cmp	r3, #5
 800179e:	d90c      	bls.n	80017ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2220      	movs	r2, #32
 80017a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2203      	movs	r2, #3
 80017aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e015      	b.n	80017e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1e4      	bne.n	8001792 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017cc:	223f      	movs	r2, #63	; 0x3f
 80017ce:	409a      	lsls	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d004      	beq.n	800180c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2280      	movs	r2, #128	; 0x80
 8001806:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e00c      	b.n	8001826 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2205      	movs	r2, #5
 8001810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	; 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	e159      	b.n	8001b04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001850:	2201      	movs	r2, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	429a      	cmp	r2, r3
 800186a:	f040 8148 	bne.w	8001afe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b01      	cmp	r3, #1
 8001878:	d005      	beq.n	8001886 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001882:	2b02      	cmp	r3, #2
 8001884:	d130      	bne.n	80018e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	2203      	movs	r2, #3
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018bc:	2201      	movs	r2, #1
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 0201 	and.w	r2, r3, #1
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d017      	beq.n	8001924 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d123      	bne.n	8001978 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	08da      	lsrs	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3208      	adds	r2, #8
 8001938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	220f      	movs	r2, #15
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	691a      	ldr	r2, [r3, #16]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	08da      	lsrs	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3208      	adds	r2, #8
 8001972:	69b9      	ldr	r1, [r7, #24]
 8001974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2203      	movs	r2, #3
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0203 	and.w	r2, r3, #3
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80a2 	beq.w	8001afe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b57      	ldr	r3, [pc, #348]	; (8001b1c <HAL_GPIO_Init+0x2e8>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	4a56      	ldr	r2, [pc, #344]	; (8001b1c <HAL_GPIO_Init+0x2e8>)
 80019c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ca:	4b54      	ldr	r3, [pc, #336]	; (8001b1c <HAL_GPIO_Init+0x2e8>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019d6:	4a52      	ldr	r2, [pc, #328]	; (8001b20 <HAL_GPIO_Init+0x2ec>)
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	3302      	adds	r3, #2
 80019de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	220f      	movs	r2, #15
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a49      	ldr	r2, [pc, #292]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d019      	beq.n	8001a36 <HAL_GPIO_Init+0x202>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a48      	ldr	r2, [pc, #288]	; (8001b28 <HAL_GPIO_Init+0x2f4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d013      	beq.n	8001a32 <HAL_GPIO_Init+0x1fe>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a47      	ldr	r2, [pc, #284]	; (8001b2c <HAL_GPIO_Init+0x2f8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00d      	beq.n	8001a2e <HAL_GPIO_Init+0x1fa>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a46      	ldr	r2, [pc, #280]	; (8001b30 <HAL_GPIO_Init+0x2fc>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d007      	beq.n	8001a2a <HAL_GPIO_Init+0x1f6>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a45      	ldr	r2, [pc, #276]	; (8001b34 <HAL_GPIO_Init+0x300>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d101      	bne.n	8001a26 <HAL_GPIO_Init+0x1f2>
 8001a22:	2304      	movs	r3, #4
 8001a24:	e008      	b.n	8001a38 <HAL_GPIO_Init+0x204>
 8001a26:	2307      	movs	r3, #7
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x204>
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e004      	b.n	8001a38 <HAL_GPIO_Init+0x204>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e002      	b.n	8001a38 <HAL_GPIO_Init+0x204>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_GPIO_Init+0x204>
 8001a36:	2300      	movs	r3, #0
 8001a38:	69fa      	ldr	r2, [r7, #28]
 8001a3a:	f002 0203 	and.w	r2, r2, #3
 8001a3e:	0092      	lsls	r2, r2, #2
 8001a40:	4093      	lsls	r3, r2
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a48:	4935      	ldr	r1, [pc, #212]	; (8001b20 <HAL_GPIO_Init+0x2ec>)
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	089b      	lsrs	r3, r3, #2
 8001a4e:	3302      	adds	r3, #2
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a56:	4b38      	ldr	r3, [pc, #224]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a7a:	4a2f      	ldr	r2, [pc, #188]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a80:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aa4:	4a24      	ldr	r2, [pc, #144]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aaa:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ace:	4a1a      	ldr	r2, [pc, #104]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001af8:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3301      	adds	r3, #1
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	2b0f      	cmp	r3, #15
 8001b08:	f67f aea2 	bls.w	8001850 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40013800 	.word	0x40013800
 8001b24:	40020000 	.word	0x40020000
 8001b28:	40020400 	.word	0x40020400
 8001b2c:	40020800 	.word	0x40020800
 8001b30:	40020c00 	.word	0x40020c00
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40013c00 	.word	0x40013c00

08001b3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e267      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d075      	beq.n	8001c46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b5a:	4b88      	ldr	r3, [pc, #544]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d00c      	beq.n	8001b80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b66:	4b85      	ldr	r3, [pc, #532]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d112      	bne.n	8001b98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b72:	4b82      	ldr	r3, [pc, #520]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b7e:	d10b      	bne.n	8001b98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b80:	4b7e      	ldr	r3, [pc, #504]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d05b      	beq.n	8001c44 <HAL_RCC_OscConfig+0x108>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d157      	bne.n	8001c44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e242      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba0:	d106      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x74>
 8001ba2:	4b76      	ldr	r3, [pc, #472]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a75      	ldr	r2, [pc, #468]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e01d      	b.n	8001bec <HAL_RCC_OscConfig+0xb0>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x98>
 8001bba:	4b70      	ldr	r3, [pc, #448]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a6f      	ldr	r2, [pc, #444]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b6d      	ldr	r3, [pc, #436]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a6c      	ldr	r2, [pc, #432]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e00b      	b.n	8001bec <HAL_RCC_OscConfig+0xb0>
 8001bd4:	4b69      	ldr	r3, [pc, #420]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a68      	ldr	r2, [pc, #416]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b66      	ldr	r3, [pc, #408]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a65      	ldr	r2, [pc, #404]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d013      	beq.n	8001c1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f858 	bl	8000ca8 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff f854 	bl	8000ca8 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	; 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e207      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	4b5b      	ldr	r3, [pc, #364]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0xc0>
 8001c1a:	e014      	b.n	8001c46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff f844 	bl	8000ca8 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c24:	f7ff f840 	bl	8000ca8 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	; 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e1f3      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	4b51      	ldr	r3, [pc, #324]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0xe8>
 8001c42:	e000      	b.n	8001c46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d063      	beq.n	8001d1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c52:	4b4a      	ldr	r3, [pc, #296]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00b      	beq.n	8001c76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d11c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c6a:	4b44      	ldr	r3, [pc, #272]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d116      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c76:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d005      	beq.n	8001c8e <HAL_RCC_OscConfig+0x152>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e1c7      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8e:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4937      	ldr	r1, [pc, #220]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca2:	e03a      	b.n	8001d1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d020      	beq.n	8001cee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cac:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_RCC_OscConfig+0x244>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb2:	f7fe fff9 	bl	8000ca8 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cba:	f7fe fff5 	bl	8000ca8 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e1a8      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd8:	4b28      	ldr	r3, [pc, #160]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4925      	ldr	r1, [pc, #148]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	600b      	str	r3, [r1, #0]
 8001cec:	e015      	b.n	8001d1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cee:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <HAL_RCC_OscConfig+0x244>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf4:	f7fe ffd8 	bl	8000ca8 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cfc:	f7fe ffd4 	bl	8000ca8 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e187      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0e:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d036      	beq.n	8001d94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d016      	beq.n	8001d5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <HAL_RCC_OscConfig+0x248>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7fe ffb8 	bl	8000ca8 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d3c:	f7fe ffb4 	bl	8000ca8 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e167      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x200>
 8001d5a:	e01b      	b.n	8001d94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RCC_OscConfig+0x248>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d62:	f7fe ffa1 	bl	8000ca8 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d68:	e00e      	b.n	8001d88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d6a:	f7fe ff9d 	bl	8000ca8 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d907      	bls.n	8001d88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e150      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	42470000 	.word	0x42470000
 8001d84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d88:	4b88      	ldr	r3, [pc, #544]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1ea      	bne.n	8001d6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 8097 	beq.w	8001ed0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da6:	4b81      	ldr	r3, [pc, #516]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10f      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	4b7d      	ldr	r3, [pc, #500]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a7c      	ldr	r2, [pc, #496]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc2:	4b7a      	ldr	r3, [pc, #488]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd2:	4b77      	ldr	r3, [pc, #476]	; (8001fb0 <HAL_RCC_OscConfig+0x474>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d118      	bne.n	8001e10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dde:	4b74      	ldr	r3, [pc, #464]	; (8001fb0 <HAL_RCC_OscConfig+0x474>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a73      	ldr	r2, [pc, #460]	; (8001fb0 <HAL_RCC_OscConfig+0x474>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dea:	f7fe ff5d 	bl	8000ca8 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df2:	f7fe ff59 	bl	8000ca8 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e10c      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e04:	4b6a      	ldr	r3, [pc, #424]	; (8001fb0 <HAL_RCC_OscConfig+0x474>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d106      	bne.n	8001e26 <HAL_RCC_OscConfig+0x2ea>
 8001e18:	4b64      	ldr	r3, [pc, #400]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1c:	4a63      	ldr	r2, [pc, #396]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6713      	str	r3, [r2, #112]	; 0x70
 8001e24:	e01c      	b.n	8001e60 <HAL_RCC_OscConfig+0x324>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b05      	cmp	r3, #5
 8001e2c:	d10c      	bne.n	8001e48 <HAL_RCC_OscConfig+0x30c>
 8001e2e:	4b5f      	ldr	r3, [pc, #380]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e32:	4a5e      	ldr	r2, [pc, #376]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e34:	f043 0304 	orr.w	r3, r3, #4
 8001e38:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3a:	4b5c      	ldr	r3, [pc, #368]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3e:	4a5b      	ldr	r2, [pc, #364]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6713      	str	r3, [r2, #112]	; 0x70
 8001e46:	e00b      	b.n	8001e60 <HAL_RCC_OscConfig+0x324>
 8001e48:	4b58      	ldr	r3, [pc, #352]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4c:	4a57      	ldr	r2, [pc, #348]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	6713      	str	r3, [r2, #112]	; 0x70
 8001e54:	4b55      	ldr	r3, [pc, #340]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	4a54      	ldr	r2, [pc, #336]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e5a:	f023 0304 	bic.w	r3, r3, #4
 8001e5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d015      	beq.n	8001e94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e68:	f7fe ff1e 	bl	8000ca8 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6e:	e00a      	b.n	8001e86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e70:	f7fe ff1a 	bl	8000ca8 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e0cb      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e86:	4b49      	ldr	r3, [pc, #292]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0ee      	beq.n	8001e70 <HAL_RCC_OscConfig+0x334>
 8001e92:	e014      	b.n	8001ebe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e94:	f7fe ff08 	bl	8000ca8 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9a:	e00a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e9c:	f7fe ff04 	bl	8000ca8 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e0b5      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb2:	4b3e      	ldr	r3, [pc, #248]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ee      	bne.n	8001e9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d105      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec4:	4b39      	ldr	r3, [pc, #228]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	4a38      	ldr	r2, [pc, #224]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ece:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80a1 	beq.w	800201c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eda:	4b34      	ldr	r3, [pc, #208]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d05c      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d141      	bne.n	8001f72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eee:	4b31      	ldr	r3, [pc, #196]	; (8001fb4 <HAL_RCC_OscConfig+0x478>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7fe fed8 	bl	8000ca8 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001efc:	f7fe fed4 	bl	8000ca8 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e087      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0e:	4b27      	ldr	r3, [pc, #156]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69da      	ldr	r2, [r3, #28]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	019b      	lsls	r3, r3, #6
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	085b      	lsrs	r3, r3, #1
 8001f32:	3b01      	subs	r3, #1
 8001f34:	041b      	lsls	r3, r3, #16
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	061b      	lsls	r3, r3, #24
 8001f3e:	491b      	ldr	r1, [pc, #108]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f44:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <HAL_RCC_OscConfig+0x478>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4a:	f7fe fead 	bl	8000ca8 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f52:	f7fe fea9 	bl	8000ca8 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e05c      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x416>
 8001f70:	e054      	b.n	800201c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <HAL_RCC_OscConfig+0x478>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7fe fe96 	bl	8000ca8 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f80:	f7fe fe92 	bl	8000ca8 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e045      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_RCC_OscConfig+0x470>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x444>
 8001f9e:	e03d      	b.n	800201c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d107      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e038      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40007000 	.word	0x40007000
 8001fb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <HAL_RCC_OscConfig+0x4ec>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d028      	beq.n	8002018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d121      	bne.n	8002018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d11a      	bne.n	8002018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fe8:	4013      	ands	r3, r2
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d111      	bne.n	8002018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	085b      	lsrs	r3, r3, #1
 8002000:	3b01      	subs	r3, #1
 8002002:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d107      	bne.n	8002018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800

0800202c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0cc      	b.n	80021da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002040:	4b68      	ldr	r3, [pc, #416]	; (80021e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d90c      	bls.n	8002068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b65      	ldr	r3, [pc, #404]	; (80021e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b63      	ldr	r3, [pc, #396]	; (80021e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0b8      	b.n	80021da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d020      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002080:	4b59      	ldr	r3, [pc, #356]	; (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4a58      	ldr	r2, [pc, #352]	; (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800208a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002098:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4a52      	ldr	r2, [pc, #328]	; (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a4:	4b50      	ldr	r3, [pc, #320]	; (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	494d      	ldr	r1, [pc, #308]	; (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d044      	beq.n	800214c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d119      	bne.n	800210a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e07f      	b.n	80021da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d003      	beq.n	80020ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ea:	4b3f      	ldr	r3, [pc, #252]	; (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d109      	bne.n	800210a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e06f      	b.n	80021da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fa:	4b3b      	ldr	r3, [pc, #236]	; (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e067      	b.n	80021da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800210a:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f023 0203 	bic.w	r2, r3, #3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4934      	ldr	r1, [pc, #208]	; (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	4313      	orrs	r3, r2
 800211a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800211c:	f7fe fdc4 	bl	8000ca8 <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002122:	e00a      	b.n	800213a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002124:	f7fe fdc0 	bl	8000ca8 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e04f      	b.n	80021da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 020c 	and.w	r2, r3, #12
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	429a      	cmp	r2, r3
 800214a:	d1eb      	bne.n	8002124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800214c:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <HAL_RCC_ClockConfig+0x1b8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d20c      	bcs.n	8002174 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215a:	4b22      	ldr	r3, [pc, #136]	; (80021e4 <HAL_RCC_ClockConfig+0x1b8>)
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e032      	b.n	80021da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4916      	ldr	r1, [pc, #88]	; (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	4313      	orrs	r3, r2
 8002190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	490e      	ldr	r1, [pc, #56]	; (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021b2:	f000 f821 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 80021b6:	4602      	mov	r2, r0
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	490a      	ldr	r1, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	5ccb      	ldrb	r3, [r1, r3]
 80021c6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ca:	4a09      	ldr	r2, [pc, #36]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_RCC_ClockConfig+0x1c8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe fd24 	bl	8000c20 <HAL_InitTick>

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023c00 	.word	0x40023c00
 80021e8:	40023800 	.word	0x40023800
 80021ec:	08004488 	.word	0x08004488
 80021f0:	20000000 	.word	0x20000000
 80021f4:	20000004 	.word	0x20000004

080021f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021fc:	b090      	sub	sp, #64	; 0x40
 80021fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	637b      	str	r3, [r7, #52]	; 0x34
 8002204:	2300      	movs	r3, #0
 8002206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002208:	2300      	movs	r3, #0
 800220a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002210:	4b59      	ldr	r3, [pc, #356]	; (8002378 <HAL_RCC_GetSysClockFreq+0x180>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 030c 	and.w	r3, r3, #12
 8002218:	2b08      	cmp	r3, #8
 800221a:	d00d      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0x40>
 800221c:	2b08      	cmp	r3, #8
 800221e:	f200 80a1 	bhi.w	8002364 <HAL_RCC_GetSysClockFreq+0x16c>
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0x34>
 8002226:	2b04      	cmp	r3, #4
 8002228:	d003      	beq.n	8002232 <HAL_RCC_GetSysClockFreq+0x3a>
 800222a:	e09b      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800222c:	4b53      	ldr	r3, [pc, #332]	; (800237c <HAL_RCC_GetSysClockFreq+0x184>)
 800222e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002230:	e09b      	b.n	800236a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002232:	4b53      	ldr	r3, [pc, #332]	; (8002380 <HAL_RCC_GetSysClockFreq+0x188>)
 8002234:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002236:	e098      	b.n	800236a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002238:	4b4f      	ldr	r3, [pc, #316]	; (8002378 <HAL_RCC_GetSysClockFreq+0x180>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002240:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002242:	4b4d      	ldr	r3, [pc, #308]	; (8002378 <HAL_RCC_GetSysClockFreq+0x180>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d028      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800224e:	4b4a      	ldr	r3, [pc, #296]	; (8002378 <HAL_RCC_GetSysClockFreq+0x180>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	099b      	lsrs	r3, r3, #6
 8002254:	2200      	movs	r2, #0
 8002256:	623b      	str	r3, [r7, #32]
 8002258:	627a      	str	r2, [r7, #36]	; 0x24
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002260:	2100      	movs	r1, #0
 8002262:	4b47      	ldr	r3, [pc, #284]	; (8002380 <HAL_RCC_GetSysClockFreq+0x188>)
 8002264:	fb03 f201 	mul.w	r2, r3, r1
 8002268:	2300      	movs	r3, #0
 800226a:	fb00 f303 	mul.w	r3, r0, r3
 800226e:	4413      	add	r3, r2
 8002270:	4a43      	ldr	r2, [pc, #268]	; (8002380 <HAL_RCC_GetSysClockFreq+0x188>)
 8002272:	fba0 1202 	umull	r1, r2, r0, r2
 8002276:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002278:	460a      	mov	r2, r1
 800227a:	62ba      	str	r2, [r7, #40]	; 0x28
 800227c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800227e:	4413      	add	r3, r2
 8002280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002284:	2200      	movs	r2, #0
 8002286:	61bb      	str	r3, [r7, #24]
 8002288:	61fa      	str	r2, [r7, #28]
 800228a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800228e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002292:	f7fd fff5 	bl	8000280 <__aeabi_uldivmod>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4613      	mov	r3, r2
 800229c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800229e:	e053      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a0:	4b35      	ldr	r3, [pc, #212]	; (8002378 <HAL_RCC_GetSysClockFreq+0x180>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	099b      	lsrs	r3, r3, #6
 80022a6:	2200      	movs	r2, #0
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	617a      	str	r2, [r7, #20]
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022b2:	f04f 0b00 	mov.w	fp, #0
 80022b6:	4652      	mov	r2, sl
 80022b8:	465b      	mov	r3, fp
 80022ba:	f04f 0000 	mov.w	r0, #0
 80022be:	f04f 0100 	mov.w	r1, #0
 80022c2:	0159      	lsls	r1, r3, #5
 80022c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c8:	0150      	lsls	r0, r2, #5
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	ebb2 080a 	subs.w	r8, r2, sl
 80022d2:	eb63 090b 	sbc.w	r9, r3, fp
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022ea:	ebb2 0408 	subs.w	r4, r2, r8
 80022ee:	eb63 0509 	sbc.w	r5, r3, r9
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	00eb      	lsls	r3, r5, #3
 80022fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002300:	00e2      	lsls	r2, r4, #3
 8002302:	4614      	mov	r4, r2
 8002304:	461d      	mov	r5, r3
 8002306:	eb14 030a 	adds.w	r3, r4, sl
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	eb45 030b 	adc.w	r3, r5, fp
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800231e:	4629      	mov	r1, r5
 8002320:	028b      	lsls	r3, r1, #10
 8002322:	4621      	mov	r1, r4
 8002324:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002328:	4621      	mov	r1, r4
 800232a:	028a      	lsls	r2, r1, #10
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002332:	2200      	movs	r2, #0
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	60fa      	str	r2, [r7, #12]
 8002338:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800233c:	f7fd ffa0 	bl	8000280 <__aeabi_uldivmod>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4613      	mov	r3, r2
 8002346:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCC_GetSysClockFreq+0x180>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	0c1b      	lsrs	r3, r3, #16
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	3301      	adds	r3, #1
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002358:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800235a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002360:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002362:	e002      	b.n	800236a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_RCC_GetSysClockFreq+0x184>)
 8002366:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800236a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800236c:	4618      	mov	r0, r3
 800236e:	3740      	adds	r7, #64	; 0x40
 8002370:	46bd      	mov	sp, r7
 8002372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	00f42400 	.word	0x00f42400
 8002380:	017d7840 	.word	0x017d7840

08002384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <HAL_RCC_GetHCLKFreq+0x14>)
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000000 	.word	0x20000000

0800239c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023a0:	f7ff fff0 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	0a9b      	lsrs	r3, r3, #10
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4903      	ldr	r1, [pc, #12]	; (80023c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40023800 	.word	0x40023800
 80023c0:	08004498 	.word	0x08004498

080023c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023c8:	f7ff ffdc 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	0b5b      	lsrs	r3, r3, #13
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4903      	ldr	r1, [pc, #12]	; (80023e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40023800 	.word	0x40023800
 80023e8:	08004498 	.word	0x08004498

080023ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e03f      	b.n	800247e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fe fa48 	bl	80008a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2224      	movs	r2, #36	; 0x24
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800242e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 fddf 	bl	8002ff4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002444:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695a      	ldr	r2, [r3, #20]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002454:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002464:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b08a      	sub	sp, #40	; 0x28
 800248a:	af02      	add	r7, sp, #8
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	603b      	str	r3, [r7, #0]
 8002492:	4613      	mov	r3, r2
 8002494:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b20      	cmp	r3, #32
 80024a4:	d17c      	bne.n	80025a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <HAL_UART_Transmit+0x2c>
 80024ac:	88fb      	ldrh	r3, [r7, #6]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e075      	b.n	80025a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_UART_Transmit+0x3e>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e06e      	b.n	80025a2 <HAL_UART_Transmit+0x11c>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2221      	movs	r2, #33	; 0x21
 80024d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024da:	f7fe fbe5 	bl	8000ca8 <HAL_GetTick>
 80024de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	88fa      	ldrh	r2, [r7, #6]
 80024e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	88fa      	ldrh	r2, [r7, #6]
 80024ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f4:	d108      	bne.n	8002508 <HAL_UART_Transmit+0x82>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d104      	bne.n	8002508 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	e003      	b.n	8002510 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800250c:	2300      	movs	r3, #0
 800250e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002518:	e02a      	b.n	8002570 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2200      	movs	r2, #0
 8002522:	2180      	movs	r1, #128	; 0x80
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 fb1f 	bl	8002b68 <UART_WaitOnFlagUntilTimeout>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e036      	b.n	80025a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10b      	bne.n	8002552 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002548:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	3302      	adds	r3, #2
 800254e:	61bb      	str	r3, [r7, #24]
 8002550:	e007      	b.n	8002562 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	781a      	ldrb	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	3301      	adds	r3, #1
 8002560:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002574:	b29b      	uxth	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1cf      	bne.n	800251a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2200      	movs	r2, #0
 8002582:	2140      	movs	r1, #64	; 0x40
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 faef 	bl	8002b68 <UART_WaitOnFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e006      	b.n	80025a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	e000      	b.n	80025a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80025a0:	2302      	movs	r3, #2
  }
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3720      	adds	r7, #32
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	4613      	mov	r3, r2
 80025b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b20      	cmp	r3, #32
 80025c2:	d11d      	bne.n	8002600 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <HAL_UART_Receive_IT+0x26>
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e016      	b.n	8002602 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_UART_Receive_IT+0x38>
 80025de:	2302      	movs	r3, #2
 80025e0:	e00f      	b.n	8002602 <HAL_UART_Receive_IT+0x58>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	461a      	mov	r2, r3
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 fb24 	bl	8002c44 <UART_Start_Receive_IT>
 80025fc:	4603      	mov	r3, r0
 80025fe:	e000      	b.n	8002602 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002600:	2302      	movs	r3, #2
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b0ba      	sub	sp, #232	; 0xe8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002632:	2300      	movs	r3, #0
 8002634:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002638:	2300      	movs	r3, #0
 800263a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800263e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800264a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10f      	bne.n	8002672 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <HAL_UART_IRQHandler+0x66>
 800265e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fc07 	bl	8002e7e <UART_Receive_IT>
      return;
 8002670:	e256      	b.n	8002b20 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002672:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 80de 	beq.w	8002838 <HAL_UART_IRQHandler+0x22c>
 800267c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d106      	bne.n	8002696 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800268c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80d1 	beq.w	8002838 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <HAL_UART_IRQHandler+0xae>
 80026a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f043 0201 	orr.w	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <HAL_UART_IRQHandler+0xd2>
 80026c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d005      	beq.n	80026de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f043 0202 	orr.w	r2, r3, #2
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00b      	beq.n	8002702 <HAL_UART_IRQHandler+0xf6>
 80026ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d005      	beq.n	8002702 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f043 0204 	orr.w	r2, r3, #4
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d011      	beq.n	8002732 <HAL_UART_IRQHandler+0x126>
 800270e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b00      	cmp	r3, #0
 8002718:	d105      	bne.n	8002726 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800271a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f043 0208 	orr.w	r2, r3, #8
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 81ed 	beq.w	8002b16 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800273c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002740:	f003 0320 	and.w	r3, r3, #32
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_UART_IRQHandler+0x14e>
 8002748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fb92 	bl	8002e7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002764:	2b40      	cmp	r3, #64	; 0x40
 8002766:	bf0c      	ite	eq
 8002768:	2301      	moveq	r3, #1
 800276a:	2300      	movne	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d103      	bne.n	8002786 <HAL_UART_IRQHandler+0x17a>
 800277e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002782:	2b00      	cmp	r3, #0
 8002784:	d04f      	beq.n	8002826 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 fa9a 	bl	8002cc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002796:	2b40      	cmp	r3, #64	; 0x40
 8002798:	d141      	bne.n	800281e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3314      	adds	r3, #20
 80027a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027a8:	e853 3f00 	ldrex	r3, [r3]
 80027ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80027b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	3314      	adds	r3, #20
 80027c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80027c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80027ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80027d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80027d6:	e841 2300 	strex	r3, r2, [r1]
 80027da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80027de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1d9      	bne.n	800279a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d013      	beq.n	8002816 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f2:	4a7d      	ldr	r2, [pc, #500]	; (80029e8 <HAL_UART_IRQHandler+0x3dc>)
 80027f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe fff7 	bl	80017ee <HAL_DMA_Abort_IT>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d016      	beq.n	8002834 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002810:	4610      	mov	r0, r2
 8002812:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002814:	e00e      	b.n	8002834 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f990 	bl	8002b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800281c:	e00a      	b.n	8002834 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f98c 	bl	8002b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002824:	e006      	b.n	8002834 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f988 	bl	8002b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002832:	e170      	b.n	8002b16 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002834:	bf00      	nop
    return;
 8002836:	e16e      	b.n	8002b16 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	2b01      	cmp	r3, #1
 800283e:	f040 814a 	bne.w	8002ad6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 8143 	beq.w	8002ad6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 813c 	beq.w	8002ad6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287e:	2b40      	cmp	r3, #64	; 0x40
 8002880:	f040 80b4 	bne.w	80029ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002890:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 8140 	beq.w	8002b1a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800289e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028a2:	429a      	cmp	r2, r3
 80028a4:	f080 8139 	bcs.w	8002b1a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ba:	f000 8088 	beq.w	80029ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	330c      	adds	r3, #12
 80028c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028cc:	e853 3f00 	ldrex	r3, [r3]
 80028d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80028d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	330c      	adds	r3, #12
 80028e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80028ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80028f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028fa:	e841 2300 	strex	r3, r2, [r1]
 80028fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002902:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1d9      	bne.n	80028be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3314      	adds	r3, #20
 8002910:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002914:	e853 3f00 	ldrex	r3, [r3]
 8002918:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800291a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3314      	adds	r3, #20
 800292a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800292e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002932:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002934:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002936:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800293a:	e841 2300 	strex	r3, r2, [r1]
 800293e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1e1      	bne.n	800290a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3314      	adds	r3, #20
 800294c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002950:	e853 3f00 	ldrex	r3, [r3]
 8002954:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800295c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3314      	adds	r3, #20
 8002966:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800296a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800296c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002970:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002972:	e841 2300 	strex	r3, r2, [r1]
 8002976:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1e3      	bne.n	8002946 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2220      	movs	r2, #32
 8002982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	330c      	adds	r3, #12
 8002992:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002996:	e853 3f00 	ldrex	r3, [r3]
 800299a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800299c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800299e:	f023 0310 	bic.w	r3, r3, #16
 80029a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	330c      	adds	r3, #12
 80029ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80029b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80029b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029b8:	e841 2300 	strex	r3, r2, [r1]
 80029bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80029be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1e3      	bne.n	800298c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe fea0 	bl	800170e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	b29b      	uxth	r3, r3
 80029dc:	4619      	mov	r1, r3
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f8b6 	bl	8002b50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029e4:	e099      	b.n	8002b1a <HAL_UART_IRQHandler+0x50e>
 80029e6:	bf00      	nop
 80029e8:	08002d87 	.word	0x08002d87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 808b 	beq.w	8002b1e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002a08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 8086 	beq.w	8002b1e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	330c      	adds	r3, #12
 8002a18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1c:	e853 3f00 	ldrex	r3, [r3]
 8002a20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	330c      	adds	r3, #12
 8002a32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a36:	647a      	str	r2, [r7, #68]	; 0x44
 8002a38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a3e:	e841 2300 	strex	r3, r2, [r1]
 8002a42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1e3      	bne.n	8002a12 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3314      	adds	r3, #20
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	e853 3f00 	ldrex	r3, [r3]
 8002a58:	623b      	str	r3, [r7, #32]
   return(result);
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3314      	adds	r3, #20
 8002a6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a6e:	633a      	str	r2, [r7, #48]	; 0x30
 8002a70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a76:	e841 2300 	strex	r3, r2, [r1]
 8002a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1e3      	bne.n	8002a4a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	330c      	adds	r3, #12
 8002a96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	e853 3f00 	ldrex	r3, [r3]
 8002a9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0310 	bic.w	r3, r3, #16
 8002aa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	330c      	adds	r3, #12
 8002ab0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ab4:	61fa      	str	r2, [r7, #28]
 8002ab6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab8:	69b9      	ldr	r1, [r7, #24]
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	e841 2300 	strex	r3, r2, [r1]
 8002ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1e3      	bne.n	8002a90 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ac8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002acc:	4619      	mov	r1, r3
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f83e 	bl	8002b50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ad4:	e023      	b.n	8002b1e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <HAL_UART_IRQHandler+0x4ea>
 8002ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f95d 	bl	8002dae <UART_Transmit_IT>
    return;
 8002af4:	e014      	b.n	8002b20 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00e      	beq.n	8002b20 <HAL_UART_IRQHandler+0x514>
 8002b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d008      	beq.n	8002b20 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f99d 	bl	8002e4e <UART_EndTransmit_IT>
    return;
 8002b14:	e004      	b.n	8002b20 <HAL_UART_IRQHandler+0x514>
    return;
 8002b16:	bf00      	nop
 8002b18:	e002      	b.n	8002b20 <HAL_UART_IRQHandler+0x514>
      return;
 8002b1a:	bf00      	nop
 8002b1c:	e000      	b.n	8002b20 <HAL_UART_IRQHandler+0x514>
      return;
 8002b1e:	bf00      	nop
  }
}
 8002b20:	37e8      	adds	r7, #232	; 0xe8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop

08002b28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b090      	sub	sp, #64	; 0x40
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	4613      	mov	r3, r2
 8002b76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b78:	e050      	b.n	8002c1c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b80:	d04c      	beq.n	8002c1c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d007      	beq.n	8002b98 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b88:	f7fe f88e 	bl	8000ca8 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d241      	bcs.n	8002c1c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	330c      	adds	r3, #12
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	e853 3f00 	ldrex	r3, [r3]
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	330c      	adds	r3, #12
 8002bb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bb8:	637a      	str	r2, [r7, #52]	; 0x34
 8002bba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bc0:	e841 2300 	strex	r3, r2, [r1]
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1e5      	bne.n	8002b98 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3314      	adds	r3, #20
 8002bd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	e853 3f00 	ldrex	r3, [r3]
 8002bda:	613b      	str	r3, [r7, #16]
   return(result);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	3314      	adds	r3, #20
 8002bea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bec:	623a      	str	r2, [r7, #32]
 8002bee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf0:	69f9      	ldr	r1, [r7, #28]
 8002bf2:	6a3a      	ldr	r2, [r7, #32]
 8002bf4:	e841 2300 	strex	r3, r2, [r1]
 8002bf8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1e5      	bne.n	8002bcc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e00f      	b.n	8002c3c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	4013      	ands	r3, r2
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d09f      	beq.n	8002b7a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3740      	adds	r7, #64	; 0x40
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	88fa      	ldrh	r2, [r7, #6]
 8002c5c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	88fa      	ldrh	r2, [r7, #6]
 8002c62:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2222      	movs	r2, #34	; 0x22
 8002c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c90:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f042 0220 	orr.w	r2, r2, #32
 8002cb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b095      	sub	sp, #84	; 0x54
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	330c      	adds	r3, #12
 8002cce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd2:	e853 3f00 	ldrex	r3, [r3]
 8002cd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	330c      	adds	r3, #12
 8002ce6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ce8:	643a      	str	r2, [r7, #64]	; 0x40
 8002cea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002cee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002cf0:	e841 2300 	strex	r3, r2, [r1]
 8002cf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1e5      	bne.n	8002cc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3314      	adds	r3, #20
 8002d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	e853 3f00 	ldrex	r3, [r3]
 8002d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3314      	adds	r3, #20
 8002d1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d24:	e841 2300 	strex	r3, r2, [r1]
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e5      	bne.n	8002cfc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d119      	bne.n	8002d6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	e853 3f00 	ldrex	r3, [r3]
 8002d46:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f023 0310 	bic.w	r3, r3, #16
 8002d4e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	330c      	adds	r3, #12
 8002d56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d58:	61ba      	str	r2, [r7, #24]
 8002d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5c:	6979      	ldr	r1, [r7, #20]
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	e841 2300 	strex	r3, r2, [r1]
 8002d64:	613b      	str	r3, [r7, #16]
   return(result);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e5      	bne.n	8002d38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d7a:	bf00      	nop
 8002d7c:	3754      	adds	r7, #84	; 0x54
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f7ff fecb 	bl	8002b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b085      	sub	sp, #20
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b21      	cmp	r3, #33	; 0x21
 8002dc0:	d13e      	bne.n	8002e40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dca:	d114      	bne.n	8002df6 <UART_Transmit_IT+0x48>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d110      	bne.n	8002df6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002de8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	1c9a      	adds	r2, r3, #2
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	621a      	str	r2, [r3, #32]
 8002df4:	e008      	b.n	8002e08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	1c59      	adds	r1, r3, #1
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6211      	str	r1, [r2, #32]
 8002e00:	781a      	ldrb	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	4619      	mov	r1, r3
 8002e16:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10f      	bne.n	8002e3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e000      	b.n	8002e42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e40:	2302      	movs	r3, #2
  }
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff fe5a 	bl	8002b28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b08c      	sub	sp, #48	; 0x30
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b22      	cmp	r3, #34	; 0x22
 8002e90:	f040 80ab 	bne.w	8002fea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9c:	d117      	bne.n	8002ece <UART_Receive_IT+0x50>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d113      	bne.n	8002ece <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	1c9a      	adds	r2, r3, #2
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
 8002ecc:	e026      	b.n	8002f1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee0:	d007      	beq.n	8002ef2 <UART_Receive_IT+0x74>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10a      	bne.n	8002f00 <UART_Receive_IT+0x82>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e008      	b.n	8002f12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d15a      	bne.n	8002fe6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0220 	bic.w	r2, r2, #32
 8002f3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0201 	bic.w	r2, r2, #1
 8002f5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d135      	bne.n	8002fdc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	330c      	adds	r3, #12
 8002f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	e853 3f00 	ldrex	r3, [r3]
 8002f84:	613b      	str	r3, [r7, #16]
   return(result);
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f023 0310 	bic.w	r3, r3, #16
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	330c      	adds	r3, #12
 8002f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f96:	623a      	str	r2, [r7, #32]
 8002f98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9a:	69f9      	ldr	r1, [r7, #28]
 8002f9c:	6a3a      	ldr	r2, [r7, #32]
 8002f9e:	e841 2300 	strex	r3, r2, [r1]
 8002fa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1e5      	bne.n	8002f76 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	2b10      	cmp	r3, #16
 8002fb6:	d10a      	bne.n	8002fce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff fdbb 	bl	8002b50 <HAL_UARTEx_RxEventCallback>
 8002fda:	e002      	b.n	8002fe2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7fd fd8f 	bl	8000b00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e002      	b.n	8002fec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e000      	b.n	8002fec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002fea:	2302      	movs	r3, #2
  }
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3730      	adds	r7, #48	; 0x30
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff8:	b0c0      	sub	sp, #256	; 0x100
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800300c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003010:	68d9      	ldr	r1, [r3, #12]
 8003012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	ea40 0301 	orr.w	r3, r0, r1
 800301c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800301e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	431a      	orrs	r2, r3
 800302c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	431a      	orrs	r2, r3
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800304c:	f021 010c 	bic.w	r1, r1, #12
 8003050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800305a:	430b      	orrs	r3, r1
 800305c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800305e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800306a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306e:	6999      	ldr	r1, [r3, #24]
 8003070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	ea40 0301 	orr.w	r3, r0, r1
 800307a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	4b8f      	ldr	r3, [pc, #572]	; (80032c0 <UART_SetConfig+0x2cc>)
 8003084:	429a      	cmp	r2, r3
 8003086:	d005      	beq.n	8003094 <UART_SetConfig+0xa0>
 8003088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	4b8d      	ldr	r3, [pc, #564]	; (80032c4 <UART_SetConfig+0x2d0>)
 8003090:	429a      	cmp	r2, r3
 8003092:	d104      	bne.n	800309e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003094:	f7ff f996 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 8003098:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800309c:	e003      	b.n	80030a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800309e:	f7ff f97d 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 80030a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b0:	f040 810c 	bne.w	80032cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030b8:	2200      	movs	r2, #0
 80030ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030c6:	4622      	mov	r2, r4
 80030c8:	462b      	mov	r3, r5
 80030ca:	1891      	adds	r1, r2, r2
 80030cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80030ce:	415b      	adcs	r3, r3
 80030d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030d6:	4621      	mov	r1, r4
 80030d8:	eb12 0801 	adds.w	r8, r2, r1
 80030dc:	4629      	mov	r1, r5
 80030de:	eb43 0901 	adc.w	r9, r3, r1
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030f6:	4690      	mov	r8, r2
 80030f8:	4699      	mov	r9, r3
 80030fa:	4623      	mov	r3, r4
 80030fc:	eb18 0303 	adds.w	r3, r8, r3
 8003100:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003104:	462b      	mov	r3, r5
 8003106:	eb49 0303 	adc.w	r3, r9, r3
 800310a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800310e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800311a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800311e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003122:	460b      	mov	r3, r1
 8003124:	18db      	adds	r3, r3, r3
 8003126:	653b      	str	r3, [r7, #80]	; 0x50
 8003128:	4613      	mov	r3, r2
 800312a:	eb42 0303 	adc.w	r3, r2, r3
 800312e:	657b      	str	r3, [r7, #84]	; 0x54
 8003130:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003134:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003138:	f7fd f8a2 	bl	8000280 <__aeabi_uldivmod>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4b61      	ldr	r3, [pc, #388]	; (80032c8 <UART_SetConfig+0x2d4>)
 8003142:	fba3 2302 	umull	r2, r3, r3, r2
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	011c      	lsls	r4, r3, #4
 800314a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800314e:	2200      	movs	r2, #0
 8003150:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003154:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003158:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800315c:	4642      	mov	r2, r8
 800315e:	464b      	mov	r3, r9
 8003160:	1891      	adds	r1, r2, r2
 8003162:	64b9      	str	r1, [r7, #72]	; 0x48
 8003164:	415b      	adcs	r3, r3
 8003166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003168:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800316c:	4641      	mov	r1, r8
 800316e:	eb12 0a01 	adds.w	sl, r2, r1
 8003172:	4649      	mov	r1, r9
 8003174:	eb43 0b01 	adc.w	fp, r3, r1
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003184:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003188:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800318c:	4692      	mov	sl, r2
 800318e:	469b      	mov	fp, r3
 8003190:	4643      	mov	r3, r8
 8003192:	eb1a 0303 	adds.w	r3, sl, r3
 8003196:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800319a:	464b      	mov	r3, r9
 800319c:	eb4b 0303 	adc.w	r3, fp, r3
 80031a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031b8:	460b      	mov	r3, r1
 80031ba:	18db      	adds	r3, r3, r3
 80031bc:	643b      	str	r3, [r7, #64]	; 0x40
 80031be:	4613      	mov	r3, r2
 80031c0:	eb42 0303 	adc.w	r3, r2, r3
 80031c4:	647b      	str	r3, [r7, #68]	; 0x44
 80031c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031ce:	f7fd f857 	bl	8000280 <__aeabi_uldivmod>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4611      	mov	r1, r2
 80031d8:	4b3b      	ldr	r3, [pc, #236]	; (80032c8 <UART_SetConfig+0x2d4>)
 80031da:	fba3 2301 	umull	r2, r3, r3, r1
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	2264      	movs	r2, #100	; 0x64
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	1acb      	subs	r3, r1, r3
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031ee:	4b36      	ldr	r3, [pc, #216]	; (80032c8 <UART_SetConfig+0x2d4>)
 80031f0:	fba3 2302 	umull	r2, r3, r3, r2
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031fc:	441c      	add	r4, r3
 80031fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003202:	2200      	movs	r2, #0
 8003204:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003208:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800320c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003210:	4642      	mov	r2, r8
 8003212:	464b      	mov	r3, r9
 8003214:	1891      	adds	r1, r2, r2
 8003216:	63b9      	str	r1, [r7, #56]	; 0x38
 8003218:	415b      	adcs	r3, r3
 800321a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800321c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003220:	4641      	mov	r1, r8
 8003222:	1851      	adds	r1, r2, r1
 8003224:	6339      	str	r1, [r7, #48]	; 0x30
 8003226:	4649      	mov	r1, r9
 8003228:	414b      	adcs	r3, r1
 800322a:	637b      	str	r3, [r7, #52]	; 0x34
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003238:	4659      	mov	r1, fp
 800323a:	00cb      	lsls	r3, r1, #3
 800323c:	4651      	mov	r1, sl
 800323e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003242:	4651      	mov	r1, sl
 8003244:	00ca      	lsls	r2, r1, #3
 8003246:	4610      	mov	r0, r2
 8003248:	4619      	mov	r1, r3
 800324a:	4603      	mov	r3, r0
 800324c:	4642      	mov	r2, r8
 800324e:	189b      	adds	r3, r3, r2
 8003250:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003254:	464b      	mov	r3, r9
 8003256:	460a      	mov	r2, r1
 8003258:	eb42 0303 	adc.w	r3, r2, r3
 800325c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800326c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003270:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003274:	460b      	mov	r3, r1
 8003276:	18db      	adds	r3, r3, r3
 8003278:	62bb      	str	r3, [r7, #40]	; 0x28
 800327a:	4613      	mov	r3, r2
 800327c:	eb42 0303 	adc.w	r3, r2, r3
 8003280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003282:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003286:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800328a:	f7fc fff9 	bl	8000280 <__aeabi_uldivmod>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4b0d      	ldr	r3, [pc, #52]	; (80032c8 <UART_SetConfig+0x2d4>)
 8003294:	fba3 1302 	umull	r1, r3, r3, r2
 8003298:	095b      	lsrs	r3, r3, #5
 800329a:	2164      	movs	r1, #100	; 0x64
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	3332      	adds	r3, #50	; 0x32
 80032a6:	4a08      	ldr	r2, [pc, #32]	; (80032c8 <UART_SetConfig+0x2d4>)
 80032a8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	f003 0207 	and.w	r2, r3, #7
 80032b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4422      	add	r2, r4
 80032ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032bc:	e105      	b.n	80034ca <UART_SetConfig+0x4d6>
 80032be:	bf00      	nop
 80032c0:	40011000 	.word	0x40011000
 80032c4:	40011400 	.word	0x40011400
 80032c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032d0:	2200      	movs	r2, #0
 80032d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032de:	4642      	mov	r2, r8
 80032e0:	464b      	mov	r3, r9
 80032e2:	1891      	adds	r1, r2, r2
 80032e4:	6239      	str	r1, [r7, #32]
 80032e6:	415b      	adcs	r3, r3
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032ee:	4641      	mov	r1, r8
 80032f0:	1854      	adds	r4, r2, r1
 80032f2:	4649      	mov	r1, r9
 80032f4:	eb43 0501 	adc.w	r5, r3, r1
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	00eb      	lsls	r3, r5, #3
 8003302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003306:	00e2      	lsls	r2, r4, #3
 8003308:	4614      	mov	r4, r2
 800330a:	461d      	mov	r5, r3
 800330c:	4643      	mov	r3, r8
 800330e:	18e3      	adds	r3, r4, r3
 8003310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003314:	464b      	mov	r3, r9
 8003316:	eb45 0303 	adc.w	r3, r5, r3
 800331a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800331e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800332a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800333a:	4629      	mov	r1, r5
 800333c:	008b      	lsls	r3, r1, #2
 800333e:	4621      	mov	r1, r4
 8003340:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003344:	4621      	mov	r1, r4
 8003346:	008a      	lsls	r2, r1, #2
 8003348:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800334c:	f7fc ff98 	bl	8000280 <__aeabi_uldivmod>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4b60      	ldr	r3, [pc, #384]	; (80034d8 <UART_SetConfig+0x4e4>)
 8003356:	fba3 2302 	umull	r2, r3, r3, r2
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	011c      	lsls	r4, r3, #4
 800335e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003362:	2200      	movs	r2, #0
 8003364:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003368:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800336c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003370:	4642      	mov	r2, r8
 8003372:	464b      	mov	r3, r9
 8003374:	1891      	adds	r1, r2, r2
 8003376:	61b9      	str	r1, [r7, #24]
 8003378:	415b      	adcs	r3, r3
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003380:	4641      	mov	r1, r8
 8003382:	1851      	adds	r1, r2, r1
 8003384:	6139      	str	r1, [r7, #16]
 8003386:	4649      	mov	r1, r9
 8003388:	414b      	adcs	r3, r1
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003398:	4659      	mov	r1, fp
 800339a:	00cb      	lsls	r3, r1, #3
 800339c:	4651      	mov	r1, sl
 800339e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033a2:	4651      	mov	r1, sl
 80033a4:	00ca      	lsls	r2, r1, #3
 80033a6:	4610      	mov	r0, r2
 80033a8:	4619      	mov	r1, r3
 80033aa:	4603      	mov	r3, r0
 80033ac:	4642      	mov	r2, r8
 80033ae:	189b      	adds	r3, r3, r2
 80033b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033b4:	464b      	mov	r3, r9
 80033b6:	460a      	mov	r2, r1
 80033b8:	eb42 0303 	adc.w	r3, r2, r3
 80033bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80033ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033d8:	4649      	mov	r1, r9
 80033da:	008b      	lsls	r3, r1, #2
 80033dc:	4641      	mov	r1, r8
 80033de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033e2:	4641      	mov	r1, r8
 80033e4:	008a      	lsls	r2, r1, #2
 80033e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033ea:	f7fc ff49 	bl	8000280 <__aeabi_uldivmod>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4b39      	ldr	r3, [pc, #228]	; (80034d8 <UART_SetConfig+0x4e4>)
 80033f4:	fba3 1302 	umull	r1, r3, r3, r2
 80033f8:	095b      	lsrs	r3, r3, #5
 80033fa:	2164      	movs	r1, #100	; 0x64
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	3332      	adds	r3, #50	; 0x32
 8003406:	4a34      	ldr	r2, [pc, #208]	; (80034d8 <UART_SetConfig+0x4e4>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003412:	441c      	add	r4, r3
 8003414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003418:	2200      	movs	r2, #0
 800341a:	673b      	str	r3, [r7, #112]	; 0x70
 800341c:	677a      	str	r2, [r7, #116]	; 0x74
 800341e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003422:	4642      	mov	r2, r8
 8003424:	464b      	mov	r3, r9
 8003426:	1891      	adds	r1, r2, r2
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	415b      	adcs	r3, r3
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003432:	4641      	mov	r1, r8
 8003434:	1851      	adds	r1, r2, r1
 8003436:	6039      	str	r1, [r7, #0]
 8003438:	4649      	mov	r1, r9
 800343a:	414b      	adcs	r3, r1
 800343c:	607b      	str	r3, [r7, #4]
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800344a:	4659      	mov	r1, fp
 800344c:	00cb      	lsls	r3, r1, #3
 800344e:	4651      	mov	r1, sl
 8003450:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003454:	4651      	mov	r1, sl
 8003456:	00ca      	lsls	r2, r1, #3
 8003458:	4610      	mov	r0, r2
 800345a:	4619      	mov	r1, r3
 800345c:	4603      	mov	r3, r0
 800345e:	4642      	mov	r2, r8
 8003460:	189b      	adds	r3, r3, r2
 8003462:	66bb      	str	r3, [r7, #104]	; 0x68
 8003464:	464b      	mov	r3, r9
 8003466:	460a      	mov	r2, r1
 8003468:	eb42 0303 	adc.w	r3, r2, r3
 800346c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800346e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	663b      	str	r3, [r7, #96]	; 0x60
 8003478:	667a      	str	r2, [r7, #100]	; 0x64
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003486:	4649      	mov	r1, r9
 8003488:	008b      	lsls	r3, r1, #2
 800348a:	4641      	mov	r1, r8
 800348c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003490:	4641      	mov	r1, r8
 8003492:	008a      	lsls	r2, r1, #2
 8003494:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003498:	f7fc fef2 	bl	8000280 <__aeabi_uldivmod>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <UART_SetConfig+0x4e4>)
 80034a2:	fba3 1302 	umull	r1, r3, r3, r2
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	2164      	movs	r1, #100	; 0x64
 80034aa:	fb01 f303 	mul.w	r3, r1, r3
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	3332      	adds	r3, #50	; 0x32
 80034b4:	4a08      	ldr	r2, [pc, #32]	; (80034d8 <UART_SetConfig+0x4e4>)
 80034b6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	f003 020f 	and.w	r2, r3, #15
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4422      	add	r2, r4
 80034c8:	609a      	str	r2, [r3, #8]
}
 80034ca:	bf00      	nop
 80034cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034d0:	46bd      	mov	sp, r7
 80034d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034d6:	bf00      	nop
 80034d8:	51eb851f 	.word	0x51eb851f

080034dc <__errno>:
 80034dc:	4b01      	ldr	r3, [pc, #4]	; (80034e4 <__errno+0x8>)
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	2000000c 	.word	0x2000000c

080034e8 <__libc_init_array>:
 80034e8:	b570      	push	{r4, r5, r6, lr}
 80034ea:	4d0d      	ldr	r5, [pc, #52]	; (8003520 <__libc_init_array+0x38>)
 80034ec:	4c0d      	ldr	r4, [pc, #52]	; (8003524 <__libc_init_array+0x3c>)
 80034ee:	1b64      	subs	r4, r4, r5
 80034f0:	10a4      	asrs	r4, r4, #2
 80034f2:	2600      	movs	r6, #0
 80034f4:	42a6      	cmp	r6, r4
 80034f6:	d109      	bne.n	800350c <__libc_init_array+0x24>
 80034f8:	4d0b      	ldr	r5, [pc, #44]	; (8003528 <__libc_init_array+0x40>)
 80034fa:	4c0c      	ldr	r4, [pc, #48]	; (800352c <__libc_init_array+0x44>)
 80034fc:	f000 ffae 	bl	800445c <_init>
 8003500:	1b64      	subs	r4, r4, r5
 8003502:	10a4      	asrs	r4, r4, #2
 8003504:	2600      	movs	r6, #0
 8003506:	42a6      	cmp	r6, r4
 8003508:	d105      	bne.n	8003516 <__libc_init_array+0x2e>
 800350a:	bd70      	pop	{r4, r5, r6, pc}
 800350c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003510:	4798      	blx	r3
 8003512:	3601      	adds	r6, #1
 8003514:	e7ee      	b.n	80034f4 <__libc_init_array+0xc>
 8003516:	f855 3b04 	ldr.w	r3, [r5], #4
 800351a:	4798      	blx	r3
 800351c:	3601      	adds	r6, #1
 800351e:	e7f2      	b.n	8003506 <__libc_init_array+0x1e>
 8003520:	08004540 	.word	0x08004540
 8003524:	08004540 	.word	0x08004540
 8003528:	08004540 	.word	0x08004540
 800352c:	08004544 	.word	0x08004544

08003530 <memset>:
 8003530:	4402      	add	r2, r0
 8003532:	4603      	mov	r3, r0
 8003534:	4293      	cmp	r3, r2
 8003536:	d100      	bne.n	800353a <memset+0xa>
 8003538:	4770      	bx	lr
 800353a:	f803 1b01 	strb.w	r1, [r3], #1
 800353e:	e7f9      	b.n	8003534 <memset+0x4>

08003540 <iprintf>:
 8003540:	b40f      	push	{r0, r1, r2, r3}
 8003542:	4b0a      	ldr	r3, [pc, #40]	; (800356c <iprintf+0x2c>)
 8003544:	b513      	push	{r0, r1, r4, lr}
 8003546:	681c      	ldr	r4, [r3, #0]
 8003548:	b124      	cbz	r4, 8003554 <iprintf+0x14>
 800354a:	69a3      	ldr	r3, [r4, #24]
 800354c:	b913      	cbnz	r3, 8003554 <iprintf+0x14>
 800354e:	4620      	mov	r0, r4
 8003550:	f000 f866 	bl	8003620 <__sinit>
 8003554:	ab05      	add	r3, sp, #20
 8003556:	9a04      	ldr	r2, [sp, #16]
 8003558:	68a1      	ldr	r1, [r4, #8]
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	4620      	mov	r0, r4
 800355e:	f000 f9bd 	bl	80038dc <_vfiprintf_r>
 8003562:	b002      	add	sp, #8
 8003564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003568:	b004      	add	sp, #16
 800356a:	4770      	bx	lr
 800356c:	2000000c 	.word	0x2000000c

08003570 <std>:
 8003570:	2300      	movs	r3, #0
 8003572:	b510      	push	{r4, lr}
 8003574:	4604      	mov	r4, r0
 8003576:	e9c0 3300 	strd	r3, r3, [r0]
 800357a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800357e:	6083      	str	r3, [r0, #8]
 8003580:	8181      	strh	r1, [r0, #12]
 8003582:	6643      	str	r3, [r0, #100]	; 0x64
 8003584:	81c2      	strh	r2, [r0, #14]
 8003586:	6183      	str	r3, [r0, #24]
 8003588:	4619      	mov	r1, r3
 800358a:	2208      	movs	r2, #8
 800358c:	305c      	adds	r0, #92	; 0x5c
 800358e:	f7ff ffcf 	bl	8003530 <memset>
 8003592:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <std+0x38>)
 8003594:	6263      	str	r3, [r4, #36]	; 0x24
 8003596:	4b05      	ldr	r3, [pc, #20]	; (80035ac <std+0x3c>)
 8003598:	62a3      	str	r3, [r4, #40]	; 0x28
 800359a:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <std+0x40>)
 800359c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <std+0x44>)
 80035a0:	6224      	str	r4, [r4, #32]
 80035a2:	6323      	str	r3, [r4, #48]	; 0x30
 80035a4:	bd10      	pop	{r4, pc}
 80035a6:	bf00      	nop
 80035a8:	08003e85 	.word	0x08003e85
 80035ac:	08003ea7 	.word	0x08003ea7
 80035b0:	08003edf 	.word	0x08003edf
 80035b4:	08003f03 	.word	0x08003f03

080035b8 <_cleanup_r>:
 80035b8:	4901      	ldr	r1, [pc, #4]	; (80035c0 <_cleanup_r+0x8>)
 80035ba:	f000 b8af 	b.w	800371c <_fwalk_reent>
 80035be:	bf00      	nop
 80035c0:	080041dd 	.word	0x080041dd

080035c4 <__sfmoreglue>:
 80035c4:	b570      	push	{r4, r5, r6, lr}
 80035c6:	2268      	movs	r2, #104	; 0x68
 80035c8:	1e4d      	subs	r5, r1, #1
 80035ca:	4355      	muls	r5, r2
 80035cc:	460e      	mov	r6, r1
 80035ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80035d2:	f000 f8e5 	bl	80037a0 <_malloc_r>
 80035d6:	4604      	mov	r4, r0
 80035d8:	b140      	cbz	r0, 80035ec <__sfmoreglue+0x28>
 80035da:	2100      	movs	r1, #0
 80035dc:	e9c0 1600 	strd	r1, r6, [r0]
 80035e0:	300c      	adds	r0, #12
 80035e2:	60a0      	str	r0, [r4, #8]
 80035e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80035e8:	f7ff ffa2 	bl	8003530 <memset>
 80035ec:	4620      	mov	r0, r4
 80035ee:	bd70      	pop	{r4, r5, r6, pc}

080035f0 <__sfp_lock_acquire>:
 80035f0:	4801      	ldr	r0, [pc, #4]	; (80035f8 <__sfp_lock_acquire+0x8>)
 80035f2:	f000 b8b3 	b.w	800375c <__retarget_lock_acquire_recursive>
 80035f6:	bf00      	nop
 80035f8:	20000225 	.word	0x20000225

080035fc <__sfp_lock_release>:
 80035fc:	4801      	ldr	r0, [pc, #4]	; (8003604 <__sfp_lock_release+0x8>)
 80035fe:	f000 b8ae 	b.w	800375e <__retarget_lock_release_recursive>
 8003602:	bf00      	nop
 8003604:	20000225 	.word	0x20000225

08003608 <__sinit_lock_acquire>:
 8003608:	4801      	ldr	r0, [pc, #4]	; (8003610 <__sinit_lock_acquire+0x8>)
 800360a:	f000 b8a7 	b.w	800375c <__retarget_lock_acquire_recursive>
 800360e:	bf00      	nop
 8003610:	20000226 	.word	0x20000226

08003614 <__sinit_lock_release>:
 8003614:	4801      	ldr	r0, [pc, #4]	; (800361c <__sinit_lock_release+0x8>)
 8003616:	f000 b8a2 	b.w	800375e <__retarget_lock_release_recursive>
 800361a:	bf00      	nop
 800361c:	20000226 	.word	0x20000226

08003620 <__sinit>:
 8003620:	b510      	push	{r4, lr}
 8003622:	4604      	mov	r4, r0
 8003624:	f7ff fff0 	bl	8003608 <__sinit_lock_acquire>
 8003628:	69a3      	ldr	r3, [r4, #24]
 800362a:	b11b      	cbz	r3, 8003634 <__sinit+0x14>
 800362c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003630:	f7ff bff0 	b.w	8003614 <__sinit_lock_release>
 8003634:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003638:	6523      	str	r3, [r4, #80]	; 0x50
 800363a:	4b13      	ldr	r3, [pc, #76]	; (8003688 <__sinit+0x68>)
 800363c:	4a13      	ldr	r2, [pc, #76]	; (800368c <__sinit+0x6c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	62a2      	str	r2, [r4, #40]	; 0x28
 8003642:	42a3      	cmp	r3, r4
 8003644:	bf04      	itt	eq
 8003646:	2301      	moveq	r3, #1
 8003648:	61a3      	streq	r3, [r4, #24]
 800364a:	4620      	mov	r0, r4
 800364c:	f000 f820 	bl	8003690 <__sfp>
 8003650:	6060      	str	r0, [r4, #4]
 8003652:	4620      	mov	r0, r4
 8003654:	f000 f81c 	bl	8003690 <__sfp>
 8003658:	60a0      	str	r0, [r4, #8]
 800365a:	4620      	mov	r0, r4
 800365c:	f000 f818 	bl	8003690 <__sfp>
 8003660:	2200      	movs	r2, #0
 8003662:	60e0      	str	r0, [r4, #12]
 8003664:	2104      	movs	r1, #4
 8003666:	6860      	ldr	r0, [r4, #4]
 8003668:	f7ff ff82 	bl	8003570 <std>
 800366c:	68a0      	ldr	r0, [r4, #8]
 800366e:	2201      	movs	r2, #1
 8003670:	2109      	movs	r1, #9
 8003672:	f7ff ff7d 	bl	8003570 <std>
 8003676:	68e0      	ldr	r0, [r4, #12]
 8003678:	2202      	movs	r2, #2
 800367a:	2112      	movs	r1, #18
 800367c:	f7ff ff78 	bl	8003570 <std>
 8003680:	2301      	movs	r3, #1
 8003682:	61a3      	str	r3, [r4, #24]
 8003684:	e7d2      	b.n	800362c <__sinit+0xc>
 8003686:	bf00      	nop
 8003688:	080044a0 	.word	0x080044a0
 800368c:	080035b9 	.word	0x080035b9

08003690 <__sfp>:
 8003690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003692:	4607      	mov	r7, r0
 8003694:	f7ff ffac 	bl	80035f0 <__sfp_lock_acquire>
 8003698:	4b1e      	ldr	r3, [pc, #120]	; (8003714 <__sfp+0x84>)
 800369a:	681e      	ldr	r6, [r3, #0]
 800369c:	69b3      	ldr	r3, [r6, #24]
 800369e:	b913      	cbnz	r3, 80036a6 <__sfp+0x16>
 80036a0:	4630      	mov	r0, r6
 80036a2:	f7ff ffbd 	bl	8003620 <__sinit>
 80036a6:	3648      	adds	r6, #72	; 0x48
 80036a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	d503      	bpl.n	80036b8 <__sfp+0x28>
 80036b0:	6833      	ldr	r3, [r6, #0]
 80036b2:	b30b      	cbz	r3, 80036f8 <__sfp+0x68>
 80036b4:	6836      	ldr	r6, [r6, #0]
 80036b6:	e7f7      	b.n	80036a8 <__sfp+0x18>
 80036b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80036bc:	b9d5      	cbnz	r5, 80036f4 <__sfp+0x64>
 80036be:	4b16      	ldr	r3, [pc, #88]	; (8003718 <__sfp+0x88>)
 80036c0:	60e3      	str	r3, [r4, #12]
 80036c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80036c6:	6665      	str	r5, [r4, #100]	; 0x64
 80036c8:	f000 f847 	bl	800375a <__retarget_lock_init_recursive>
 80036cc:	f7ff ff96 	bl	80035fc <__sfp_lock_release>
 80036d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80036d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80036d8:	6025      	str	r5, [r4, #0]
 80036da:	61a5      	str	r5, [r4, #24]
 80036dc:	2208      	movs	r2, #8
 80036de:	4629      	mov	r1, r5
 80036e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80036e4:	f7ff ff24 	bl	8003530 <memset>
 80036e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80036ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80036f0:	4620      	mov	r0, r4
 80036f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036f4:	3468      	adds	r4, #104	; 0x68
 80036f6:	e7d9      	b.n	80036ac <__sfp+0x1c>
 80036f8:	2104      	movs	r1, #4
 80036fa:	4638      	mov	r0, r7
 80036fc:	f7ff ff62 	bl	80035c4 <__sfmoreglue>
 8003700:	4604      	mov	r4, r0
 8003702:	6030      	str	r0, [r6, #0]
 8003704:	2800      	cmp	r0, #0
 8003706:	d1d5      	bne.n	80036b4 <__sfp+0x24>
 8003708:	f7ff ff78 	bl	80035fc <__sfp_lock_release>
 800370c:	230c      	movs	r3, #12
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	e7ee      	b.n	80036f0 <__sfp+0x60>
 8003712:	bf00      	nop
 8003714:	080044a0 	.word	0x080044a0
 8003718:	ffff0001 	.word	0xffff0001

0800371c <_fwalk_reent>:
 800371c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003720:	4606      	mov	r6, r0
 8003722:	4688      	mov	r8, r1
 8003724:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003728:	2700      	movs	r7, #0
 800372a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800372e:	f1b9 0901 	subs.w	r9, r9, #1
 8003732:	d505      	bpl.n	8003740 <_fwalk_reent+0x24>
 8003734:	6824      	ldr	r4, [r4, #0]
 8003736:	2c00      	cmp	r4, #0
 8003738:	d1f7      	bne.n	800372a <_fwalk_reent+0xe>
 800373a:	4638      	mov	r0, r7
 800373c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003740:	89ab      	ldrh	r3, [r5, #12]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d907      	bls.n	8003756 <_fwalk_reent+0x3a>
 8003746:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800374a:	3301      	adds	r3, #1
 800374c:	d003      	beq.n	8003756 <_fwalk_reent+0x3a>
 800374e:	4629      	mov	r1, r5
 8003750:	4630      	mov	r0, r6
 8003752:	47c0      	blx	r8
 8003754:	4307      	orrs	r7, r0
 8003756:	3568      	adds	r5, #104	; 0x68
 8003758:	e7e9      	b.n	800372e <_fwalk_reent+0x12>

0800375a <__retarget_lock_init_recursive>:
 800375a:	4770      	bx	lr

0800375c <__retarget_lock_acquire_recursive>:
 800375c:	4770      	bx	lr

0800375e <__retarget_lock_release_recursive>:
 800375e:	4770      	bx	lr

08003760 <sbrk_aligned>:
 8003760:	b570      	push	{r4, r5, r6, lr}
 8003762:	4e0e      	ldr	r6, [pc, #56]	; (800379c <sbrk_aligned+0x3c>)
 8003764:	460c      	mov	r4, r1
 8003766:	6831      	ldr	r1, [r6, #0]
 8003768:	4605      	mov	r5, r0
 800376a:	b911      	cbnz	r1, 8003772 <sbrk_aligned+0x12>
 800376c:	f000 fb7a 	bl	8003e64 <_sbrk_r>
 8003770:	6030      	str	r0, [r6, #0]
 8003772:	4621      	mov	r1, r4
 8003774:	4628      	mov	r0, r5
 8003776:	f000 fb75 	bl	8003e64 <_sbrk_r>
 800377a:	1c43      	adds	r3, r0, #1
 800377c:	d00a      	beq.n	8003794 <sbrk_aligned+0x34>
 800377e:	1cc4      	adds	r4, r0, #3
 8003780:	f024 0403 	bic.w	r4, r4, #3
 8003784:	42a0      	cmp	r0, r4
 8003786:	d007      	beq.n	8003798 <sbrk_aligned+0x38>
 8003788:	1a21      	subs	r1, r4, r0
 800378a:	4628      	mov	r0, r5
 800378c:	f000 fb6a 	bl	8003e64 <_sbrk_r>
 8003790:	3001      	adds	r0, #1
 8003792:	d101      	bne.n	8003798 <sbrk_aligned+0x38>
 8003794:	f04f 34ff 	mov.w	r4, #4294967295
 8003798:	4620      	mov	r0, r4
 800379a:	bd70      	pop	{r4, r5, r6, pc}
 800379c:	2000022c 	.word	0x2000022c

080037a0 <_malloc_r>:
 80037a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037a4:	1ccd      	adds	r5, r1, #3
 80037a6:	f025 0503 	bic.w	r5, r5, #3
 80037aa:	3508      	adds	r5, #8
 80037ac:	2d0c      	cmp	r5, #12
 80037ae:	bf38      	it	cc
 80037b0:	250c      	movcc	r5, #12
 80037b2:	2d00      	cmp	r5, #0
 80037b4:	4607      	mov	r7, r0
 80037b6:	db01      	blt.n	80037bc <_malloc_r+0x1c>
 80037b8:	42a9      	cmp	r1, r5
 80037ba:	d905      	bls.n	80037c8 <_malloc_r+0x28>
 80037bc:	230c      	movs	r3, #12
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	2600      	movs	r6, #0
 80037c2:	4630      	mov	r0, r6
 80037c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037c8:	4e2e      	ldr	r6, [pc, #184]	; (8003884 <_malloc_r+0xe4>)
 80037ca:	f000 fdbb 	bl	8004344 <__malloc_lock>
 80037ce:	6833      	ldr	r3, [r6, #0]
 80037d0:	461c      	mov	r4, r3
 80037d2:	bb34      	cbnz	r4, 8003822 <_malloc_r+0x82>
 80037d4:	4629      	mov	r1, r5
 80037d6:	4638      	mov	r0, r7
 80037d8:	f7ff ffc2 	bl	8003760 <sbrk_aligned>
 80037dc:	1c43      	adds	r3, r0, #1
 80037de:	4604      	mov	r4, r0
 80037e0:	d14d      	bne.n	800387e <_malloc_r+0xde>
 80037e2:	6834      	ldr	r4, [r6, #0]
 80037e4:	4626      	mov	r6, r4
 80037e6:	2e00      	cmp	r6, #0
 80037e8:	d140      	bne.n	800386c <_malloc_r+0xcc>
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	4631      	mov	r1, r6
 80037ee:	4638      	mov	r0, r7
 80037f0:	eb04 0803 	add.w	r8, r4, r3
 80037f4:	f000 fb36 	bl	8003e64 <_sbrk_r>
 80037f8:	4580      	cmp	r8, r0
 80037fa:	d13a      	bne.n	8003872 <_malloc_r+0xd2>
 80037fc:	6821      	ldr	r1, [r4, #0]
 80037fe:	3503      	adds	r5, #3
 8003800:	1a6d      	subs	r5, r5, r1
 8003802:	f025 0503 	bic.w	r5, r5, #3
 8003806:	3508      	adds	r5, #8
 8003808:	2d0c      	cmp	r5, #12
 800380a:	bf38      	it	cc
 800380c:	250c      	movcc	r5, #12
 800380e:	4629      	mov	r1, r5
 8003810:	4638      	mov	r0, r7
 8003812:	f7ff ffa5 	bl	8003760 <sbrk_aligned>
 8003816:	3001      	adds	r0, #1
 8003818:	d02b      	beq.n	8003872 <_malloc_r+0xd2>
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	442b      	add	r3, r5
 800381e:	6023      	str	r3, [r4, #0]
 8003820:	e00e      	b.n	8003840 <_malloc_r+0xa0>
 8003822:	6822      	ldr	r2, [r4, #0]
 8003824:	1b52      	subs	r2, r2, r5
 8003826:	d41e      	bmi.n	8003866 <_malloc_r+0xc6>
 8003828:	2a0b      	cmp	r2, #11
 800382a:	d916      	bls.n	800385a <_malloc_r+0xba>
 800382c:	1961      	adds	r1, r4, r5
 800382e:	42a3      	cmp	r3, r4
 8003830:	6025      	str	r5, [r4, #0]
 8003832:	bf18      	it	ne
 8003834:	6059      	strne	r1, [r3, #4]
 8003836:	6863      	ldr	r3, [r4, #4]
 8003838:	bf08      	it	eq
 800383a:	6031      	streq	r1, [r6, #0]
 800383c:	5162      	str	r2, [r4, r5]
 800383e:	604b      	str	r3, [r1, #4]
 8003840:	4638      	mov	r0, r7
 8003842:	f104 060b 	add.w	r6, r4, #11
 8003846:	f000 fd83 	bl	8004350 <__malloc_unlock>
 800384a:	f026 0607 	bic.w	r6, r6, #7
 800384e:	1d23      	adds	r3, r4, #4
 8003850:	1af2      	subs	r2, r6, r3
 8003852:	d0b6      	beq.n	80037c2 <_malloc_r+0x22>
 8003854:	1b9b      	subs	r3, r3, r6
 8003856:	50a3      	str	r3, [r4, r2]
 8003858:	e7b3      	b.n	80037c2 <_malloc_r+0x22>
 800385a:	6862      	ldr	r2, [r4, #4]
 800385c:	42a3      	cmp	r3, r4
 800385e:	bf0c      	ite	eq
 8003860:	6032      	streq	r2, [r6, #0]
 8003862:	605a      	strne	r2, [r3, #4]
 8003864:	e7ec      	b.n	8003840 <_malloc_r+0xa0>
 8003866:	4623      	mov	r3, r4
 8003868:	6864      	ldr	r4, [r4, #4]
 800386a:	e7b2      	b.n	80037d2 <_malloc_r+0x32>
 800386c:	4634      	mov	r4, r6
 800386e:	6876      	ldr	r6, [r6, #4]
 8003870:	e7b9      	b.n	80037e6 <_malloc_r+0x46>
 8003872:	230c      	movs	r3, #12
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	4638      	mov	r0, r7
 8003878:	f000 fd6a 	bl	8004350 <__malloc_unlock>
 800387c:	e7a1      	b.n	80037c2 <_malloc_r+0x22>
 800387e:	6025      	str	r5, [r4, #0]
 8003880:	e7de      	b.n	8003840 <_malloc_r+0xa0>
 8003882:	bf00      	nop
 8003884:	20000228 	.word	0x20000228

08003888 <__sfputc_r>:
 8003888:	6893      	ldr	r3, [r2, #8]
 800388a:	3b01      	subs	r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	b410      	push	{r4}
 8003890:	6093      	str	r3, [r2, #8]
 8003892:	da08      	bge.n	80038a6 <__sfputc_r+0x1e>
 8003894:	6994      	ldr	r4, [r2, #24]
 8003896:	42a3      	cmp	r3, r4
 8003898:	db01      	blt.n	800389e <__sfputc_r+0x16>
 800389a:	290a      	cmp	r1, #10
 800389c:	d103      	bne.n	80038a6 <__sfputc_r+0x1e>
 800389e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038a2:	f000 bb33 	b.w	8003f0c <__swbuf_r>
 80038a6:	6813      	ldr	r3, [r2, #0]
 80038a8:	1c58      	adds	r0, r3, #1
 80038aa:	6010      	str	r0, [r2, #0]
 80038ac:	7019      	strb	r1, [r3, #0]
 80038ae:	4608      	mov	r0, r1
 80038b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <__sfputs_r>:
 80038b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b8:	4606      	mov	r6, r0
 80038ba:	460f      	mov	r7, r1
 80038bc:	4614      	mov	r4, r2
 80038be:	18d5      	adds	r5, r2, r3
 80038c0:	42ac      	cmp	r4, r5
 80038c2:	d101      	bne.n	80038c8 <__sfputs_r+0x12>
 80038c4:	2000      	movs	r0, #0
 80038c6:	e007      	b.n	80038d8 <__sfputs_r+0x22>
 80038c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038cc:	463a      	mov	r2, r7
 80038ce:	4630      	mov	r0, r6
 80038d0:	f7ff ffda 	bl	8003888 <__sfputc_r>
 80038d4:	1c43      	adds	r3, r0, #1
 80038d6:	d1f3      	bne.n	80038c0 <__sfputs_r+0xa>
 80038d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038dc <_vfiprintf_r>:
 80038dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e0:	460d      	mov	r5, r1
 80038e2:	b09d      	sub	sp, #116	; 0x74
 80038e4:	4614      	mov	r4, r2
 80038e6:	4698      	mov	r8, r3
 80038e8:	4606      	mov	r6, r0
 80038ea:	b118      	cbz	r0, 80038f4 <_vfiprintf_r+0x18>
 80038ec:	6983      	ldr	r3, [r0, #24]
 80038ee:	b90b      	cbnz	r3, 80038f4 <_vfiprintf_r+0x18>
 80038f0:	f7ff fe96 	bl	8003620 <__sinit>
 80038f4:	4b89      	ldr	r3, [pc, #548]	; (8003b1c <_vfiprintf_r+0x240>)
 80038f6:	429d      	cmp	r5, r3
 80038f8:	d11b      	bne.n	8003932 <_vfiprintf_r+0x56>
 80038fa:	6875      	ldr	r5, [r6, #4]
 80038fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038fe:	07d9      	lsls	r1, r3, #31
 8003900:	d405      	bmi.n	800390e <_vfiprintf_r+0x32>
 8003902:	89ab      	ldrh	r3, [r5, #12]
 8003904:	059a      	lsls	r2, r3, #22
 8003906:	d402      	bmi.n	800390e <_vfiprintf_r+0x32>
 8003908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800390a:	f7ff ff27 	bl	800375c <__retarget_lock_acquire_recursive>
 800390e:	89ab      	ldrh	r3, [r5, #12]
 8003910:	071b      	lsls	r3, r3, #28
 8003912:	d501      	bpl.n	8003918 <_vfiprintf_r+0x3c>
 8003914:	692b      	ldr	r3, [r5, #16]
 8003916:	b9eb      	cbnz	r3, 8003954 <_vfiprintf_r+0x78>
 8003918:	4629      	mov	r1, r5
 800391a:	4630      	mov	r0, r6
 800391c:	f000 fb5a 	bl	8003fd4 <__swsetup_r>
 8003920:	b1c0      	cbz	r0, 8003954 <_vfiprintf_r+0x78>
 8003922:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003924:	07dc      	lsls	r4, r3, #31
 8003926:	d50e      	bpl.n	8003946 <_vfiprintf_r+0x6a>
 8003928:	f04f 30ff 	mov.w	r0, #4294967295
 800392c:	b01d      	add	sp, #116	; 0x74
 800392e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003932:	4b7b      	ldr	r3, [pc, #492]	; (8003b20 <_vfiprintf_r+0x244>)
 8003934:	429d      	cmp	r5, r3
 8003936:	d101      	bne.n	800393c <_vfiprintf_r+0x60>
 8003938:	68b5      	ldr	r5, [r6, #8]
 800393a:	e7df      	b.n	80038fc <_vfiprintf_r+0x20>
 800393c:	4b79      	ldr	r3, [pc, #484]	; (8003b24 <_vfiprintf_r+0x248>)
 800393e:	429d      	cmp	r5, r3
 8003940:	bf08      	it	eq
 8003942:	68f5      	ldreq	r5, [r6, #12]
 8003944:	e7da      	b.n	80038fc <_vfiprintf_r+0x20>
 8003946:	89ab      	ldrh	r3, [r5, #12]
 8003948:	0598      	lsls	r0, r3, #22
 800394a:	d4ed      	bmi.n	8003928 <_vfiprintf_r+0x4c>
 800394c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800394e:	f7ff ff06 	bl	800375e <__retarget_lock_release_recursive>
 8003952:	e7e9      	b.n	8003928 <_vfiprintf_r+0x4c>
 8003954:	2300      	movs	r3, #0
 8003956:	9309      	str	r3, [sp, #36]	; 0x24
 8003958:	2320      	movs	r3, #32
 800395a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800395e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003962:	2330      	movs	r3, #48	; 0x30
 8003964:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003b28 <_vfiprintf_r+0x24c>
 8003968:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800396c:	f04f 0901 	mov.w	r9, #1
 8003970:	4623      	mov	r3, r4
 8003972:	469a      	mov	sl, r3
 8003974:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003978:	b10a      	cbz	r2, 800397e <_vfiprintf_r+0xa2>
 800397a:	2a25      	cmp	r2, #37	; 0x25
 800397c:	d1f9      	bne.n	8003972 <_vfiprintf_r+0x96>
 800397e:	ebba 0b04 	subs.w	fp, sl, r4
 8003982:	d00b      	beq.n	800399c <_vfiprintf_r+0xc0>
 8003984:	465b      	mov	r3, fp
 8003986:	4622      	mov	r2, r4
 8003988:	4629      	mov	r1, r5
 800398a:	4630      	mov	r0, r6
 800398c:	f7ff ff93 	bl	80038b6 <__sfputs_r>
 8003990:	3001      	adds	r0, #1
 8003992:	f000 80aa 	beq.w	8003aea <_vfiprintf_r+0x20e>
 8003996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003998:	445a      	add	r2, fp
 800399a:	9209      	str	r2, [sp, #36]	; 0x24
 800399c:	f89a 3000 	ldrb.w	r3, [sl]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80a2 	beq.w	8003aea <_vfiprintf_r+0x20e>
 80039a6:	2300      	movs	r3, #0
 80039a8:	f04f 32ff 	mov.w	r2, #4294967295
 80039ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039b0:	f10a 0a01 	add.w	sl, sl, #1
 80039b4:	9304      	str	r3, [sp, #16]
 80039b6:	9307      	str	r3, [sp, #28]
 80039b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039bc:	931a      	str	r3, [sp, #104]	; 0x68
 80039be:	4654      	mov	r4, sl
 80039c0:	2205      	movs	r2, #5
 80039c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039c6:	4858      	ldr	r0, [pc, #352]	; (8003b28 <_vfiprintf_r+0x24c>)
 80039c8:	f7fc fc0a 	bl	80001e0 <memchr>
 80039cc:	9a04      	ldr	r2, [sp, #16]
 80039ce:	b9d8      	cbnz	r0, 8003a08 <_vfiprintf_r+0x12c>
 80039d0:	06d1      	lsls	r1, r2, #27
 80039d2:	bf44      	itt	mi
 80039d4:	2320      	movmi	r3, #32
 80039d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039da:	0713      	lsls	r3, r2, #28
 80039dc:	bf44      	itt	mi
 80039de:	232b      	movmi	r3, #43	; 0x2b
 80039e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039e4:	f89a 3000 	ldrb.w	r3, [sl]
 80039e8:	2b2a      	cmp	r3, #42	; 0x2a
 80039ea:	d015      	beq.n	8003a18 <_vfiprintf_r+0x13c>
 80039ec:	9a07      	ldr	r2, [sp, #28]
 80039ee:	4654      	mov	r4, sl
 80039f0:	2000      	movs	r0, #0
 80039f2:	f04f 0c0a 	mov.w	ip, #10
 80039f6:	4621      	mov	r1, r4
 80039f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039fc:	3b30      	subs	r3, #48	; 0x30
 80039fe:	2b09      	cmp	r3, #9
 8003a00:	d94e      	bls.n	8003aa0 <_vfiprintf_r+0x1c4>
 8003a02:	b1b0      	cbz	r0, 8003a32 <_vfiprintf_r+0x156>
 8003a04:	9207      	str	r2, [sp, #28]
 8003a06:	e014      	b.n	8003a32 <_vfiprintf_r+0x156>
 8003a08:	eba0 0308 	sub.w	r3, r0, r8
 8003a0c:	fa09 f303 	lsl.w	r3, r9, r3
 8003a10:	4313      	orrs	r3, r2
 8003a12:	9304      	str	r3, [sp, #16]
 8003a14:	46a2      	mov	sl, r4
 8003a16:	e7d2      	b.n	80039be <_vfiprintf_r+0xe2>
 8003a18:	9b03      	ldr	r3, [sp, #12]
 8003a1a:	1d19      	adds	r1, r3, #4
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	9103      	str	r1, [sp, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bfbb      	ittet	lt
 8003a24:	425b      	neglt	r3, r3
 8003a26:	f042 0202 	orrlt.w	r2, r2, #2
 8003a2a:	9307      	strge	r3, [sp, #28]
 8003a2c:	9307      	strlt	r3, [sp, #28]
 8003a2e:	bfb8      	it	lt
 8003a30:	9204      	strlt	r2, [sp, #16]
 8003a32:	7823      	ldrb	r3, [r4, #0]
 8003a34:	2b2e      	cmp	r3, #46	; 0x2e
 8003a36:	d10c      	bne.n	8003a52 <_vfiprintf_r+0x176>
 8003a38:	7863      	ldrb	r3, [r4, #1]
 8003a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a3c:	d135      	bne.n	8003aaa <_vfiprintf_r+0x1ce>
 8003a3e:	9b03      	ldr	r3, [sp, #12]
 8003a40:	1d1a      	adds	r2, r3, #4
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	9203      	str	r2, [sp, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	bfb8      	it	lt
 8003a4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a4e:	3402      	adds	r4, #2
 8003a50:	9305      	str	r3, [sp, #20]
 8003a52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003b38 <_vfiprintf_r+0x25c>
 8003a56:	7821      	ldrb	r1, [r4, #0]
 8003a58:	2203      	movs	r2, #3
 8003a5a:	4650      	mov	r0, sl
 8003a5c:	f7fc fbc0 	bl	80001e0 <memchr>
 8003a60:	b140      	cbz	r0, 8003a74 <_vfiprintf_r+0x198>
 8003a62:	2340      	movs	r3, #64	; 0x40
 8003a64:	eba0 000a 	sub.w	r0, r0, sl
 8003a68:	fa03 f000 	lsl.w	r0, r3, r0
 8003a6c:	9b04      	ldr	r3, [sp, #16]
 8003a6e:	4303      	orrs	r3, r0
 8003a70:	3401      	adds	r4, #1
 8003a72:	9304      	str	r3, [sp, #16]
 8003a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a78:	482c      	ldr	r0, [pc, #176]	; (8003b2c <_vfiprintf_r+0x250>)
 8003a7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a7e:	2206      	movs	r2, #6
 8003a80:	f7fc fbae 	bl	80001e0 <memchr>
 8003a84:	2800      	cmp	r0, #0
 8003a86:	d03f      	beq.n	8003b08 <_vfiprintf_r+0x22c>
 8003a88:	4b29      	ldr	r3, [pc, #164]	; (8003b30 <_vfiprintf_r+0x254>)
 8003a8a:	bb1b      	cbnz	r3, 8003ad4 <_vfiprintf_r+0x1f8>
 8003a8c:	9b03      	ldr	r3, [sp, #12]
 8003a8e:	3307      	adds	r3, #7
 8003a90:	f023 0307 	bic.w	r3, r3, #7
 8003a94:	3308      	adds	r3, #8
 8003a96:	9303      	str	r3, [sp, #12]
 8003a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a9a:	443b      	add	r3, r7
 8003a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a9e:	e767      	b.n	8003970 <_vfiprintf_r+0x94>
 8003aa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003aa4:	460c      	mov	r4, r1
 8003aa6:	2001      	movs	r0, #1
 8003aa8:	e7a5      	b.n	80039f6 <_vfiprintf_r+0x11a>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	3401      	adds	r4, #1
 8003aae:	9305      	str	r3, [sp, #20]
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	f04f 0c0a 	mov.w	ip, #10
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003abc:	3a30      	subs	r2, #48	; 0x30
 8003abe:	2a09      	cmp	r2, #9
 8003ac0:	d903      	bls.n	8003aca <_vfiprintf_r+0x1ee>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0c5      	beq.n	8003a52 <_vfiprintf_r+0x176>
 8003ac6:	9105      	str	r1, [sp, #20]
 8003ac8:	e7c3      	b.n	8003a52 <_vfiprintf_r+0x176>
 8003aca:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ace:	4604      	mov	r4, r0
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e7f0      	b.n	8003ab6 <_vfiprintf_r+0x1da>
 8003ad4:	ab03      	add	r3, sp, #12
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	462a      	mov	r2, r5
 8003ada:	4b16      	ldr	r3, [pc, #88]	; (8003b34 <_vfiprintf_r+0x258>)
 8003adc:	a904      	add	r1, sp, #16
 8003ade:	4630      	mov	r0, r6
 8003ae0:	f3af 8000 	nop.w
 8003ae4:	4607      	mov	r7, r0
 8003ae6:	1c78      	adds	r0, r7, #1
 8003ae8:	d1d6      	bne.n	8003a98 <_vfiprintf_r+0x1bc>
 8003aea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003aec:	07d9      	lsls	r1, r3, #31
 8003aee:	d405      	bmi.n	8003afc <_vfiprintf_r+0x220>
 8003af0:	89ab      	ldrh	r3, [r5, #12]
 8003af2:	059a      	lsls	r2, r3, #22
 8003af4:	d402      	bmi.n	8003afc <_vfiprintf_r+0x220>
 8003af6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003af8:	f7ff fe31 	bl	800375e <__retarget_lock_release_recursive>
 8003afc:	89ab      	ldrh	r3, [r5, #12]
 8003afe:	065b      	lsls	r3, r3, #25
 8003b00:	f53f af12 	bmi.w	8003928 <_vfiprintf_r+0x4c>
 8003b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b06:	e711      	b.n	800392c <_vfiprintf_r+0x50>
 8003b08:	ab03      	add	r3, sp, #12
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	462a      	mov	r2, r5
 8003b0e:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <_vfiprintf_r+0x258>)
 8003b10:	a904      	add	r1, sp, #16
 8003b12:	4630      	mov	r0, r6
 8003b14:	f000 f880 	bl	8003c18 <_printf_i>
 8003b18:	e7e4      	b.n	8003ae4 <_vfiprintf_r+0x208>
 8003b1a:	bf00      	nop
 8003b1c:	080044c4 	.word	0x080044c4
 8003b20:	080044e4 	.word	0x080044e4
 8003b24:	080044a4 	.word	0x080044a4
 8003b28:	08004504 	.word	0x08004504
 8003b2c:	0800450e 	.word	0x0800450e
 8003b30:	00000000 	.word	0x00000000
 8003b34:	080038b7 	.word	0x080038b7
 8003b38:	0800450a 	.word	0x0800450a

08003b3c <_printf_common>:
 8003b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b40:	4616      	mov	r6, r2
 8003b42:	4699      	mov	r9, r3
 8003b44:	688a      	ldr	r2, [r1, #8]
 8003b46:	690b      	ldr	r3, [r1, #16]
 8003b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	bfb8      	it	lt
 8003b50:	4613      	movlt	r3, r2
 8003b52:	6033      	str	r3, [r6, #0]
 8003b54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b58:	4607      	mov	r7, r0
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	b10a      	cbz	r2, 8003b62 <_printf_common+0x26>
 8003b5e:	3301      	adds	r3, #1
 8003b60:	6033      	str	r3, [r6, #0]
 8003b62:	6823      	ldr	r3, [r4, #0]
 8003b64:	0699      	lsls	r1, r3, #26
 8003b66:	bf42      	ittt	mi
 8003b68:	6833      	ldrmi	r3, [r6, #0]
 8003b6a:	3302      	addmi	r3, #2
 8003b6c:	6033      	strmi	r3, [r6, #0]
 8003b6e:	6825      	ldr	r5, [r4, #0]
 8003b70:	f015 0506 	ands.w	r5, r5, #6
 8003b74:	d106      	bne.n	8003b84 <_printf_common+0x48>
 8003b76:	f104 0a19 	add.w	sl, r4, #25
 8003b7a:	68e3      	ldr	r3, [r4, #12]
 8003b7c:	6832      	ldr	r2, [r6, #0]
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	42ab      	cmp	r3, r5
 8003b82:	dc26      	bgt.n	8003bd2 <_printf_common+0x96>
 8003b84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b88:	1e13      	subs	r3, r2, #0
 8003b8a:	6822      	ldr	r2, [r4, #0]
 8003b8c:	bf18      	it	ne
 8003b8e:	2301      	movne	r3, #1
 8003b90:	0692      	lsls	r2, r2, #26
 8003b92:	d42b      	bmi.n	8003bec <_printf_common+0xb0>
 8003b94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b98:	4649      	mov	r1, r9
 8003b9a:	4638      	mov	r0, r7
 8003b9c:	47c0      	blx	r8
 8003b9e:	3001      	adds	r0, #1
 8003ba0:	d01e      	beq.n	8003be0 <_printf_common+0xa4>
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	68e5      	ldr	r5, [r4, #12]
 8003ba6:	6832      	ldr	r2, [r6, #0]
 8003ba8:	f003 0306 	and.w	r3, r3, #6
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	bf08      	it	eq
 8003bb0:	1aad      	subeq	r5, r5, r2
 8003bb2:	68a3      	ldr	r3, [r4, #8]
 8003bb4:	6922      	ldr	r2, [r4, #16]
 8003bb6:	bf0c      	ite	eq
 8003bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bbc:	2500      	movne	r5, #0
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	bfc4      	itt	gt
 8003bc2:	1a9b      	subgt	r3, r3, r2
 8003bc4:	18ed      	addgt	r5, r5, r3
 8003bc6:	2600      	movs	r6, #0
 8003bc8:	341a      	adds	r4, #26
 8003bca:	42b5      	cmp	r5, r6
 8003bcc:	d11a      	bne.n	8003c04 <_printf_common+0xc8>
 8003bce:	2000      	movs	r0, #0
 8003bd0:	e008      	b.n	8003be4 <_printf_common+0xa8>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	4652      	mov	r2, sl
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	4638      	mov	r0, r7
 8003bda:	47c0      	blx	r8
 8003bdc:	3001      	adds	r0, #1
 8003bde:	d103      	bne.n	8003be8 <_printf_common+0xac>
 8003be0:	f04f 30ff 	mov.w	r0, #4294967295
 8003be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be8:	3501      	adds	r5, #1
 8003bea:	e7c6      	b.n	8003b7a <_printf_common+0x3e>
 8003bec:	18e1      	adds	r1, r4, r3
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	2030      	movs	r0, #48	; 0x30
 8003bf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bf6:	4422      	add	r2, r4
 8003bf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c00:	3302      	adds	r3, #2
 8003c02:	e7c7      	b.n	8003b94 <_printf_common+0x58>
 8003c04:	2301      	movs	r3, #1
 8003c06:	4622      	mov	r2, r4
 8003c08:	4649      	mov	r1, r9
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	47c0      	blx	r8
 8003c0e:	3001      	adds	r0, #1
 8003c10:	d0e6      	beq.n	8003be0 <_printf_common+0xa4>
 8003c12:	3601      	adds	r6, #1
 8003c14:	e7d9      	b.n	8003bca <_printf_common+0x8e>
	...

08003c18 <_printf_i>:
 8003c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c1c:	7e0f      	ldrb	r7, [r1, #24]
 8003c1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c20:	2f78      	cmp	r7, #120	; 0x78
 8003c22:	4691      	mov	r9, r2
 8003c24:	4680      	mov	r8, r0
 8003c26:	460c      	mov	r4, r1
 8003c28:	469a      	mov	sl, r3
 8003c2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c2e:	d807      	bhi.n	8003c40 <_printf_i+0x28>
 8003c30:	2f62      	cmp	r7, #98	; 0x62
 8003c32:	d80a      	bhi.n	8003c4a <_printf_i+0x32>
 8003c34:	2f00      	cmp	r7, #0
 8003c36:	f000 80d8 	beq.w	8003dea <_printf_i+0x1d2>
 8003c3a:	2f58      	cmp	r7, #88	; 0x58
 8003c3c:	f000 80a3 	beq.w	8003d86 <_printf_i+0x16e>
 8003c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c48:	e03a      	b.n	8003cc0 <_printf_i+0xa8>
 8003c4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c4e:	2b15      	cmp	r3, #21
 8003c50:	d8f6      	bhi.n	8003c40 <_printf_i+0x28>
 8003c52:	a101      	add	r1, pc, #4	; (adr r1, 8003c58 <_printf_i+0x40>)
 8003c54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c58:	08003cb1 	.word	0x08003cb1
 8003c5c:	08003cc5 	.word	0x08003cc5
 8003c60:	08003c41 	.word	0x08003c41
 8003c64:	08003c41 	.word	0x08003c41
 8003c68:	08003c41 	.word	0x08003c41
 8003c6c:	08003c41 	.word	0x08003c41
 8003c70:	08003cc5 	.word	0x08003cc5
 8003c74:	08003c41 	.word	0x08003c41
 8003c78:	08003c41 	.word	0x08003c41
 8003c7c:	08003c41 	.word	0x08003c41
 8003c80:	08003c41 	.word	0x08003c41
 8003c84:	08003dd1 	.word	0x08003dd1
 8003c88:	08003cf5 	.word	0x08003cf5
 8003c8c:	08003db3 	.word	0x08003db3
 8003c90:	08003c41 	.word	0x08003c41
 8003c94:	08003c41 	.word	0x08003c41
 8003c98:	08003df3 	.word	0x08003df3
 8003c9c:	08003c41 	.word	0x08003c41
 8003ca0:	08003cf5 	.word	0x08003cf5
 8003ca4:	08003c41 	.word	0x08003c41
 8003ca8:	08003c41 	.word	0x08003c41
 8003cac:	08003dbb 	.word	0x08003dbb
 8003cb0:	682b      	ldr	r3, [r5, #0]
 8003cb2:	1d1a      	adds	r2, r3, #4
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	602a      	str	r2, [r5, #0]
 8003cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0a3      	b.n	8003e0c <_printf_i+0x1f4>
 8003cc4:	6820      	ldr	r0, [r4, #0]
 8003cc6:	6829      	ldr	r1, [r5, #0]
 8003cc8:	0606      	lsls	r6, r0, #24
 8003cca:	f101 0304 	add.w	r3, r1, #4
 8003cce:	d50a      	bpl.n	8003ce6 <_printf_i+0xce>
 8003cd0:	680e      	ldr	r6, [r1, #0]
 8003cd2:	602b      	str	r3, [r5, #0]
 8003cd4:	2e00      	cmp	r6, #0
 8003cd6:	da03      	bge.n	8003ce0 <_printf_i+0xc8>
 8003cd8:	232d      	movs	r3, #45	; 0x2d
 8003cda:	4276      	negs	r6, r6
 8003cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ce0:	485e      	ldr	r0, [pc, #376]	; (8003e5c <_printf_i+0x244>)
 8003ce2:	230a      	movs	r3, #10
 8003ce4:	e019      	b.n	8003d1a <_printf_i+0x102>
 8003ce6:	680e      	ldr	r6, [r1, #0]
 8003ce8:	602b      	str	r3, [r5, #0]
 8003cea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cee:	bf18      	it	ne
 8003cf0:	b236      	sxthne	r6, r6
 8003cf2:	e7ef      	b.n	8003cd4 <_printf_i+0xbc>
 8003cf4:	682b      	ldr	r3, [r5, #0]
 8003cf6:	6820      	ldr	r0, [r4, #0]
 8003cf8:	1d19      	adds	r1, r3, #4
 8003cfa:	6029      	str	r1, [r5, #0]
 8003cfc:	0601      	lsls	r1, r0, #24
 8003cfe:	d501      	bpl.n	8003d04 <_printf_i+0xec>
 8003d00:	681e      	ldr	r6, [r3, #0]
 8003d02:	e002      	b.n	8003d0a <_printf_i+0xf2>
 8003d04:	0646      	lsls	r6, r0, #25
 8003d06:	d5fb      	bpl.n	8003d00 <_printf_i+0xe8>
 8003d08:	881e      	ldrh	r6, [r3, #0]
 8003d0a:	4854      	ldr	r0, [pc, #336]	; (8003e5c <_printf_i+0x244>)
 8003d0c:	2f6f      	cmp	r7, #111	; 0x6f
 8003d0e:	bf0c      	ite	eq
 8003d10:	2308      	moveq	r3, #8
 8003d12:	230a      	movne	r3, #10
 8003d14:	2100      	movs	r1, #0
 8003d16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d1a:	6865      	ldr	r5, [r4, #4]
 8003d1c:	60a5      	str	r5, [r4, #8]
 8003d1e:	2d00      	cmp	r5, #0
 8003d20:	bfa2      	ittt	ge
 8003d22:	6821      	ldrge	r1, [r4, #0]
 8003d24:	f021 0104 	bicge.w	r1, r1, #4
 8003d28:	6021      	strge	r1, [r4, #0]
 8003d2a:	b90e      	cbnz	r6, 8003d30 <_printf_i+0x118>
 8003d2c:	2d00      	cmp	r5, #0
 8003d2e:	d04d      	beq.n	8003dcc <_printf_i+0x1b4>
 8003d30:	4615      	mov	r5, r2
 8003d32:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d36:	fb03 6711 	mls	r7, r3, r1, r6
 8003d3a:	5dc7      	ldrb	r7, [r0, r7]
 8003d3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d40:	4637      	mov	r7, r6
 8003d42:	42bb      	cmp	r3, r7
 8003d44:	460e      	mov	r6, r1
 8003d46:	d9f4      	bls.n	8003d32 <_printf_i+0x11a>
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d10b      	bne.n	8003d64 <_printf_i+0x14c>
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	07de      	lsls	r6, r3, #31
 8003d50:	d508      	bpl.n	8003d64 <_printf_i+0x14c>
 8003d52:	6923      	ldr	r3, [r4, #16]
 8003d54:	6861      	ldr	r1, [r4, #4]
 8003d56:	4299      	cmp	r1, r3
 8003d58:	bfde      	ittt	le
 8003d5a:	2330      	movle	r3, #48	; 0x30
 8003d5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d64:	1b52      	subs	r2, r2, r5
 8003d66:	6122      	str	r2, [r4, #16]
 8003d68:	f8cd a000 	str.w	sl, [sp]
 8003d6c:	464b      	mov	r3, r9
 8003d6e:	aa03      	add	r2, sp, #12
 8003d70:	4621      	mov	r1, r4
 8003d72:	4640      	mov	r0, r8
 8003d74:	f7ff fee2 	bl	8003b3c <_printf_common>
 8003d78:	3001      	adds	r0, #1
 8003d7a:	d14c      	bne.n	8003e16 <_printf_i+0x1fe>
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d80:	b004      	add	sp, #16
 8003d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d86:	4835      	ldr	r0, [pc, #212]	; (8003e5c <_printf_i+0x244>)
 8003d88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d8c:	6829      	ldr	r1, [r5, #0]
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d94:	6029      	str	r1, [r5, #0]
 8003d96:	061d      	lsls	r5, r3, #24
 8003d98:	d514      	bpl.n	8003dc4 <_printf_i+0x1ac>
 8003d9a:	07df      	lsls	r7, r3, #31
 8003d9c:	bf44      	itt	mi
 8003d9e:	f043 0320 	orrmi.w	r3, r3, #32
 8003da2:	6023      	strmi	r3, [r4, #0]
 8003da4:	b91e      	cbnz	r6, 8003dae <_printf_i+0x196>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	f023 0320 	bic.w	r3, r3, #32
 8003dac:	6023      	str	r3, [r4, #0]
 8003dae:	2310      	movs	r3, #16
 8003db0:	e7b0      	b.n	8003d14 <_printf_i+0xfc>
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	f043 0320 	orr.w	r3, r3, #32
 8003db8:	6023      	str	r3, [r4, #0]
 8003dba:	2378      	movs	r3, #120	; 0x78
 8003dbc:	4828      	ldr	r0, [pc, #160]	; (8003e60 <_printf_i+0x248>)
 8003dbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dc2:	e7e3      	b.n	8003d8c <_printf_i+0x174>
 8003dc4:	0659      	lsls	r1, r3, #25
 8003dc6:	bf48      	it	mi
 8003dc8:	b2b6      	uxthmi	r6, r6
 8003dca:	e7e6      	b.n	8003d9a <_printf_i+0x182>
 8003dcc:	4615      	mov	r5, r2
 8003dce:	e7bb      	b.n	8003d48 <_printf_i+0x130>
 8003dd0:	682b      	ldr	r3, [r5, #0]
 8003dd2:	6826      	ldr	r6, [r4, #0]
 8003dd4:	6961      	ldr	r1, [r4, #20]
 8003dd6:	1d18      	adds	r0, r3, #4
 8003dd8:	6028      	str	r0, [r5, #0]
 8003dda:	0635      	lsls	r5, r6, #24
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	d501      	bpl.n	8003de4 <_printf_i+0x1cc>
 8003de0:	6019      	str	r1, [r3, #0]
 8003de2:	e002      	b.n	8003dea <_printf_i+0x1d2>
 8003de4:	0670      	lsls	r0, r6, #25
 8003de6:	d5fb      	bpl.n	8003de0 <_printf_i+0x1c8>
 8003de8:	8019      	strh	r1, [r3, #0]
 8003dea:	2300      	movs	r3, #0
 8003dec:	6123      	str	r3, [r4, #16]
 8003dee:	4615      	mov	r5, r2
 8003df0:	e7ba      	b.n	8003d68 <_printf_i+0x150>
 8003df2:	682b      	ldr	r3, [r5, #0]
 8003df4:	1d1a      	adds	r2, r3, #4
 8003df6:	602a      	str	r2, [r5, #0]
 8003df8:	681d      	ldr	r5, [r3, #0]
 8003dfa:	6862      	ldr	r2, [r4, #4]
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4628      	mov	r0, r5
 8003e00:	f7fc f9ee 	bl	80001e0 <memchr>
 8003e04:	b108      	cbz	r0, 8003e0a <_printf_i+0x1f2>
 8003e06:	1b40      	subs	r0, r0, r5
 8003e08:	6060      	str	r0, [r4, #4]
 8003e0a:	6863      	ldr	r3, [r4, #4]
 8003e0c:	6123      	str	r3, [r4, #16]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e14:	e7a8      	b.n	8003d68 <_printf_i+0x150>
 8003e16:	6923      	ldr	r3, [r4, #16]
 8003e18:	462a      	mov	r2, r5
 8003e1a:	4649      	mov	r1, r9
 8003e1c:	4640      	mov	r0, r8
 8003e1e:	47d0      	blx	sl
 8003e20:	3001      	adds	r0, #1
 8003e22:	d0ab      	beq.n	8003d7c <_printf_i+0x164>
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	079b      	lsls	r3, r3, #30
 8003e28:	d413      	bmi.n	8003e52 <_printf_i+0x23a>
 8003e2a:	68e0      	ldr	r0, [r4, #12]
 8003e2c:	9b03      	ldr	r3, [sp, #12]
 8003e2e:	4298      	cmp	r0, r3
 8003e30:	bfb8      	it	lt
 8003e32:	4618      	movlt	r0, r3
 8003e34:	e7a4      	b.n	8003d80 <_printf_i+0x168>
 8003e36:	2301      	movs	r3, #1
 8003e38:	4632      	mov	r2, r6
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	4640      	mov	r0, r8
 8003e3e:	47d0      	blx	sl
 8003e40:	3001      	adds	r0, #1
 8003e42:	d09b      	beq.n	8003d7c <_printf_i+0x164>
 8003e44:	3501      	adds	r5, #1
 8003e46:	68e3      	ldr	r3, [r4, #12]
 8003e48:	9903      	ldr	r1, [sp, #12]
 8003e4a:	1a5b      	subs	r3, r3, r1
 8003e4c:	42ab      	cmp	r3, r5
 8003e4e:	dcf2      	bgt.n	8003e36 <_printf_i+0x21e>
 8003e50:	e7eb      	b.n	8003e2a <_printf_i+0x212>
 8003e52:	2500      	movs	r5, #0
 8003e54:	f104 0619 	add.w	r6, r4, #25
 8003e58:	e7f5      	b.n	8003e46 <_printf_i+0x22e>
 8003e5a:	bf00      	nop
 8003e5c:	08004515 	.word	0x08004515
 8003e60:	08004526 	.word	0x08004526

08003e64 <_sbrk_r>:
 8003e64:	b538      	push	{r3, r4, r5, lr}
 8003e66:	4d06      	ldr	r5, [pc, #24]	; (8003e80 <_sbrk_r+0x1c>)
 8003e68:	2300      	movs	r3, #0
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	602b      	str	r3, [r5, #0]
 8003e70:	f7fc fdf0 	bl	8000a54 <_sbrk>
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	d102      	bne.n	8003e7e <_sbrk_r+0x1a>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	b103      	cbz	r3, 8003e7e <_sbrk_r+0x1a>
 8003e7c:	6023      	str	r3, [r4, #0]
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
 8003e80:	20000230 	.word	0x20000230

08003e84 <__sread>:
 8003e84:	b510      	push	{r4, lr}
 8003e86:	460c      	mov	r4, r1
 8003e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e8c:	f000 fab2 	bl	80043f4 <_read_r>
 8003e90:	2800      	cmp	r0, #0
 8003e92:	bfab      	itete	ge
 8003e94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e96:	89a3      	ldrhlt	r3, [r4, #12]
 8003e98:	181b      	addge	r3, r3, r0
 8003e9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e9e:	bfac      	ite	ge
 8003ea0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ea2:	81a3      	strhlt	r3, [r4, #12]
 8003ea4:	bd10      	pop	{r4, pc}

08003ea6 <__swrite>:
 8003ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eaa:	461f      	mov	r7, r3
 8003eac:	898b      	ldrh	r3, [r1, #12]
 8003eae:	05db      	lsls	r3, r3, #23
 8003eb0:	4605      	mov	r5, r0
 8003eb2:	460c      	mov	r4, r1
 8003eb4:	4616      	mov	r6, r2
 8003eb6:	d505      	bpl.n	8003ec4 <__swrite+0x1e>
 8003eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f000 f9c8 	bl	8004254 <_lseek_r>
 8003ec4:	89a3      	ldrh	r3, [r4, #12]
 8003ec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003eca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ece:	81a3      	strh	r3, [r4, #12]
 8003ed0:	4632      	mov	r2, r6
 8003ed2:	463b      	mov	r3, r7
 8003ed4:	4628      	mov	r0, r5
 8003ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003eda:	f000 b869 	b.w	8003fb0 <_write_r>

08003ede <__sseek>:
 8003ede:	b510      	push	{r4, lr}
 8003ee0:	460c      	mov	r4, r1
 8003ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee6:	f000 f9b5 	bl	8004254 <_lseek_r>
 8003eea:	1c43      	adds	r3, r0, #1
 8003eec:	89a3      	ldrh	r3, [r4, #12]
 8003eee:	bf15      	itete	ne
 8003ef0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ef2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ef6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003efa:	81a3      	strheq	r3, [r4, #12]
 8003efc:	bf18      	it	ne
 8003efe:	81a3      	strhne	r3, [r4, #12]
 8003f00:	bd10      	pop	{r4, pc}

08003f02 <__sclose>:
 8003f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f06:	f000 b8d3 	b.w	80040b0 <_close_r>
	...

08003f0c <__swbuf_r>:
 8003f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0e:	460e      	mov	r6, r1
 8003f10:	4614      	mov	r4, r2
 8003f12:	4605      	mov	r5, r0
 8003f14:	b118      	cbz	r0, 8003f1e <__swbuf_r+0x12>
 8003f16:	6983      	ldr	r3, [r0, #24]
 8003f18:	b90b      	cbnz	r3, 8003f1e <__swbuf_r+0x12>
 8003f1a:	f7ff fb81 	bl	8003620 <__sinit>
 8003f1e:	4b21      	ldr	r3, [pc, #132]	; (8003fa4 <__swbuf_r+0x98>)
 8003f20:	429c      	cmp	r4, r3
 8003f22:	d12b      	bne.n	8003f7c <__swbuf_r+0x70>
 8003f24:	686c      	ldr	r4, [r5, #4]
 8003f26:	69a3      	ldr	r3, [r4, #24]
 8003f28:	60a3      	str	r3, [r4, #8]
 8003f2a:	89a3      	ldrh	r3, [r4, #12]
 8003f2c:	071a      	lsls	r2, r3, #28
 8003f2e:	d52f      	bpl.n	8003f90 <__swbuf_r+0x84>
 8003f30:	6923      	ldr	r3, [r4, #16]
 8003f32:	b36b      	cbz	r3, 8003f90 <__swbuf_r+0x84>
 8003f34:	6923      	ldr	r3, [r4, #16]
 8003f36:	6820      	ldr	r0, [r4, #0]
 8003f38:	1ac0      	subs	r0, r0, r3
 8003f3a:	6963      	ldr	r3, [r4, #20]
 8003f3c:	b2f6      	uxtb	r6, r6
 8003f3e:	4283      	cmp	r3, r0
 8003f40:	4637      	mov	r7, r6
 8003f42:	dc04      	bgt.n	8003f4e <__swbuf_r+0x42>
 8003f44:	4621      	mov	r1, r4
 8003f46:	4628      	mov	r0, r5
 8003f48:	f000 f948 	bl	80041dc <_fflush_r>
 8003f4c:	bb30      	cbnz	r0, 8003f9c <__swbuf_r+0x90>
 8003f4e:	68a3      	ldr	r3, [r4, #8]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	60a3      	str	r3, [r4, #8]
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	6022      	str	r2, [r4, #0]
 8003f5a:	701e      	strb	r6, [r3, #0]
 8003f5c:	6963      	ldr	r3, [r4, #20]
 8003f5e:	3001      	adds	r0, #1
 8003f60:	4283      	cmp	r3, r0
 8003f62:	d004      	beq.n	8003f6e <__swbuf_r+0x62>
 8003f64:	89a3      	ldrh	r3, [r4, #12]
 8003f66:	07db      	lsls	r3, r3, #31
 8003f68:	d506      	bpl.n	8003f78 <__swbuf_r+0x6c>
 8003f6a:	2e0a      	cmp	r6, #10
 8003f6c:	d104      	bne.n	8003f78 <__swbuf_r+0x6c>
 8003f6e:	4621      	mov	r1, r4
 8003f70:	4628      	mov	r0, r5
 8003f72:	f000 f933 	bl	80041dc <_fflush_r>
 8003f76:	b988      	cbnz	r0, 8003f9c <__swbuf_r+0x90>
 8003f78:	4638      	mov	r0, r7
 8003f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <__swbuf_r+0x9c>)
 8003f7e:	429c      	cmp	r4, r3
 8003f80:	d101      	bne.n	8003f86 <__swbuf_r+0x7a>
 8003f82:	68ac      	ldr	r4, [r5, #8]
 8003f84:	e7cf      	b.n	8003f26 <__swbuf_r+0x1a>
 8003f86:	4b09      	ldr	r3, [pc, #36]	; (8003fac <__swbuf_r+0xa0>)
 8003f88:	429c      	cmp	r4, r3
 8003f8a:	bf08      	it	eq
 8003f8c:	68ec      	ldreq	r4, [r5, #12]
 8003f8e:	e7ca      	b.n	8003f26 <__swbuf_r+0x1a>
 8003f90:	4621      	mov	r1, r4
 8003f92:	4628      	mov	r0, r5
 8003f94:	f000 f81e 	bl	8003fd4 <__swsetup_r>
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	d0cb      	beq.n	8003f34 <__swbuf_r+0x28>
 8003f9c:	f04f 37ff 	mov.w	r7, #4294967295
 8003fa0:	e7ea      	b.n	8003f78 <__swbuf_r+0x6c>
 8003fa2:	bf00      	nop
 8003fa4:	080044c4 	.word	0x080044c4
 8003fa8:	080044e4 	.word	0x080044e4
 8003fac:	080044a4 	.word	0x080044a4

08003fb0 <_write_r>:
 8003fb0:	b538      	push	{r3, r4, r5, lr}
 8003fb2:	4d07      	ldr	r5, [pc, #28]	; (8003fd0 <_write_r+0x20>)
 8003fb4:	4604      	mov	r4, r0
 8003fb6:	4608      	mov	r0, r1
 8003fb8:	4611      	mov	r1, r2
 8003fba:	2200      	movs	r2, #0
 8003fbc:	602a      	str	r2, [r5, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f7fc fdce 	bl	8000b60 <_write>
 8003fc4:	1c43      	adds	r3, r0, #1
 8003fc6:	d102      	bne.n	8003fce <_write_r+0x1e>
 8003fc8:	682b      	ldr	r3, [r5, #0]
 8003fca:	b103      	cbz	r3, 8003fce <_write_r+0x1e>
 8003fcc:	6023      	str	r3, [r4, #0]
 8003fce:	bd38      	pop	{r3, r4, r5, pc}
 8003fd0:	20000230 	.word	0x20000230

08003fd4 <__swsetup_r>:
 8003fd4:	4b32      	ldr	r3, [pc, #200]	; (80040a0 <__swsetup_r+0xcc>)
 8003fd6:	b570      	push	{r4, r5, r6, lr}
 8003fd8:	681d      	ldr	r5, [r3, #0]
 8003fda:	4606      	mov	r6, r0
 8003fdc:	460c      	mov	r4, r1
 8003fde:	b125      	cbz	r5, 8003fea <__swsetup_r+0x16>
 8003fe0:	69ab      	ldr	r3, [r5, #24]
 8003fe2:	b913      	cbnz	r3, 8003fea <__swsetup_r+0x16>
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	f7ff fb1b 	bl	8003620 <__sinit>
 8003fea:	4b2e      	ldr	r3, [pc, #184]	; (80040a4 <__swsetup_r+0xd0>)
 8003fec:	429c      	cmp	r4, r3
 8003fee:	d10f      	bne.n	8004010 <__swsetup_r+0x3c>
 8003ff0:	686c      	ldr	r4, [r5, #4]
 8003ff2:	89a3      	ldrh	r3, [r4, #12]
 8003ff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ff8:	0719      	lsls	r1, r3, #28
 8003ffa:	d42c      	bmi.n	8004056 <__swsetup_r+0x82>
 8003ffc:	06dd      	lsls	r5, r3, #27
 8003ffe:	d411      	bmi.n	8004024 <__swsetup_r+0x50>
 8004000:	2309      	movs	r3, #9
 8004002:	6033      	str	r3, [r6, #0]
 8004004:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004008:	81a3      	strh	r3, [r4, #12]
 800400a:	f04f 30ff 	mov.w	r0, #4294967295
 800400e:	e03e      	b.n	800408e <__swsetup_r+0xba>
 8004010:	4b25      	ldr	r3, [pc, #148]	; (80040a8 <__swsetup_r+0xd4>)
 8004012:	429c      	cmp	r4, r3
 8004014:	d101      	bne.n	800401a <__swsetup_r+0x46>
 8004016:	68ac      	ldr	r4, [r5, #8]
 8004018:	e7eb      	b.n	8003ff2 <__swsetup_r+0x1e>
 800401a:	4b24      	ldr	r3, [pc, #144]	; (80040ac <__swsetup_r+0xd8>)
 800401c:	429c      	cmp	r4, r3
 800401e:	bf08      	it	eq
 8004020:	68ec      	ldreq	r4, [r5, #12]
 8004022:	e7e6      	b.n	8003ff2 <__swsetup_r+0x1e>
 8004024:	0758      	lsls	r0, r3, #29
 8004026:	d512      	bpl.n	800404e <__swsetup_r+0x7a>
 8004028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800402a:	b141      	cbz	r1, 800403e <__swsetup_r+0x6a>
 800402c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004030:	4299      	cmp	r1, r3
 8004032:	d002      	beq.n	800403a <__swsetup_r+0x66>
 8004034:	4630      	mov	r0, r6
 8004036:	f000 f991 	bl	800435c <_free_r>
 800403a:	2300      	movs	r3, #0
 800403c:	6363      	str	r3, [r4, #52]	; 0x34
 800403e:	89a3      	ldrh	r3, [r4, #12]
 8004040:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004044:	81a3      	strh	r3, [r4, #12]
 8004046:	2300      	movs	r3, #0
 8004048:	6063      	str	r3, [r4, #4]
 800404a:	6923      	ldr	r3, [r4, #16]
 800404c:	6023      	str	r3, [r4, #0]
 800404e:	89a3      	ldrh	r3, [r4, #12]
 8004050:	f043 0308 	orr.w	r3, r3, #8
 8004054:	81a3      	strh	r3, [r4, #12]
 8004056:	6923      	ldr	r3, [r4, #16]
 8004058:	b94b      	cbnz	r3, 800406e <__swsetup_r+0x9a>
 800405a:	89a3      	ldrh	r3, [r4, #12]
 800405c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004064:	d003      	beq.n	800406e <__swsetup_r+0x9a>
 8004066:	4621      	mov	r1, r4
 8004068:	4630      	mov	r0, r6
 800406a:	f000 f92b 	bl	80042c4 <__smakebuf_r>
 800406e:	89a0      	ldrh	r0, [r4, #12]
 8004070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004074:	f010 0301 	ands.w	r3, r0, #1
 8004078:	d00a      	beq.n	8004090 <__swsetup_r+0xbc>
 800407a:	2300      	movs	r3, #0
 800407c:	60a3      	str	r3, [r4, #8]
 800407e:	6963      	ldr	r3, [r4, #20]
 8004080:	425b      	negs	r3, r3
 8004082:	61a3      	str	r3, [r4, #24]
 8004084:	6923      	ldr	r3, [r4, #16]
 8004086:	b943      	cbnz	r3, 800409a <__swsetup_r+0xc6>
 8004088:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800408c:	d1ba      	bne.n	8004004 <__swsetup_r+0x30>
 800408e:	bd70      	pop	{r4, r5, r6, pc}
 8004090:	0781      	lsls	r1, r0, #30
 8004092:	bf58      	it	pl
 8004094:	6963      	ldrpl	r3, [r4, #20]
 8004096:	60a3      	str	r3, [r4, #8]
 8004098:	e7f4      	b.n	8004084 <__swsetup_r+0xb0>
 800409a:	2000      	movs	r0, #0
 800409c:	e7f7      	b.n	800408e <__swsetup_r+0xba>
 800409e:	bf00      	nop
 80040a0:	2000000c 	.word	0x2000000c
 80040a4:	080044c4 	.word	0x080044c4
 80040a8:	080044e4 	.word	0x080044e4
 80040ac:	080044a4 	.word	0x080044a4

080040b0 <_close_r>:
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	4d06      	ldr	r5, [pc, #24]	; (80040cc <_close_r+0x1c>)
 80040b4:	2300      	movs	r3, #0
 80040b6:	4604      	mov	r4, r0
 80040b8:	4608      	mov	r0, r1
 80040ba:	602b      	str	r3, [r5, #0]
 80040bc:	f7fc fc95 	bl	80009ea <_close>
 80040c0:	1c43      	adds	r3, r0, #1
 80040c2:	d102      	bne.n	80040ca <_close_r+0x1a>
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	b103      	cbz	r3, 80040ca <_close_r+0x1a>
 80040c8:	6023      	str	r3, [r4, #0]
 80040ca:	bd38      	pop	{r3, r4, r5, pc}
 80040cc:	20000230 	.word	0x20000230

080040d0 <__sflush_r>:
 80040d0:	898a      	ldrh	r2, [r1, #12]
 80040d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040d6:	4605      	mov	r5, r0
 80040d8:	0710      	lsls	r0, r2, #28
 80040da:	460c      	mov	r4, r1
 80040dc:	d458      	bmi.n	8004190 <__sflush_r+0xc0>
 80040de:	684b      	ldr	r3, [r1, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	dc05      	bgt.n	80040f0 <__sflush_r+0x20>
 80040e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	dc02      	bgt.n	80040f0 <__sflush_r+0x20>
 80040ea:	2000      	movs	r0, #0
 80040ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040f2:	2e00      	cmp	r6, #0
 80040f4:	d0f9      	beq.n	80040ea <__sflush_r+0x1a>
 80040f6:	2300      	movs	r3, #0
 80040f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80040fc:	682f      	ldr	r7, [r5, #0]
 80040fe:	602b      	str	r3, [r5, #0]
 8004100:	d032      	beq.n	8004168 <__sflush_r+0x98>
 8004102:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	075a      	lsls	r2, r3, #29
 8004108:	d505      	bpl.n	8004116 <__sflush_r+0x46>
 800410a:	6863      	ldr	r3, [r4, #4]
 800410c:	1ac0      	subs	r0, r0, r3
 800410e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004110:	b10b      	cbz	r3, 8004116 <__sflush_r+0x46>
 8004112:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004114:	1ac0      	subs	r0, r0, r3
 8004116:	2300      	movs	r3, #0
 8004118:	4602      	mov	r2, r0
 800411a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800411c:	6a21      	ldr	r1, [r4, #32]
 800411e:	4628      	mov	r0, r5
 8004120:	47b0      	blx	r6
 8004122:	1c43      	adds	r3, r0, #1
 8004124:	89a3      	ldrh	r3, [r4, #12]
 8004126:	d106      	bne.n	8004136 <__sflush_r+0x66>
 8004128:	6829      	ldr	r1, [r5, #0]
 800412a:	291d      	cmp	r1, #29
 800412c:	d82c      	bhi.n	8004188 <__sflush_r+0xb8>
 800412e:	4a2a      	ldr	r2, [pc, #168]	; (80041d8 <__sflush_r+0x108>)
 8004130:	40ca      	lsrs	r2, r1
 8004132:	07d6      	lsls	r6, r2, #31
 8004134:	d528      	bpl.n	8004188 <__sflush_r+0xb8>
 8004136:	2200      	movs	r2, #0
 8004138:	6062      	str	r2, [r4, #4]
 800413a:	04d9      	lsls	r1, r3, #19
 800413c:	6922      	ldr	r2, [r4, #16]
 800413e:	6022      	str	r2, [r4, #0]
 8004140:	d504      	bpl.n	800414c <__sflush_r+0x7c>
 8004142:	1c42      	adds	r2, r0, #1
 8004144:	d101      	bne.n	800414a <__sflush_r+0x7a>
 8004146:	682b      	ldr	r3, [r5, #0]
 8004148:	b903      	cbnz	r3, 800414c <__sflush_r+0x7c>
 800414a:	6560      	str	r0, [r4, #84]	; 0x54
 800414c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800414e:	602f      	str	r7, [r5, #0]
 8004150:	2900      	cmp	r1, #0
 8004152:	d0ca      	beq.n	80040ea <__sflush_r+0x1a>
 8004154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004158:	4299      	cmp	r1, r3
 800415a:	d002      	beq.n	8004162 <__sflush_r+0x92>
 800415c:	4628      	mov	r0, r5
 800415e:	f000 f8fd 	bl	800435c <_free_r>
 8004162:	2000      	movs	r0, #0
 8004164:	6360      	str	r0, [r4, #52]	; 0x34
 8004166:	e7c1      	b.n	80040ec <__sflush_r+0x1c>
 8004168:	6a21      	ldr	r1, [r4, #32]
 800416a:	2301      	movs	r3, #1
 800416c:	4628      	mov	r0, r5
 800416e:	47b0      	blx	r6
 8004170:	1c41      	adds	r1, r0, #1
 8004172:	d1c7      	bne.n	8004104 <__sflush_r+0x34>
 8004174:	682b      	ldr	r3, [r5, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0c4      	beq.n	8004104 <__sflush_r+0x34>
 800417a:	2b1d      	cmp	r3, #29
 800417c:	d001      	beq.n	8004182 <__sflush_r+0xb2>
 800417e:	2b16      	cmp	r3, #22
 8004180:	d101      	bne.n	8004186 <__sflush_r+0xb6>
 8004182:	602f      	str	r7, [r5, #0]
 8004184:	e7b1      	b.n	80040ea <__sflush_r+0x1a>
 8004186:	89a3      	ldrh	r3, [r4, #12]
 8004188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800418c:	81a3      	strh	r3, [r4, #12]
 800418e:	e7ad      	b.n	80040ec <__sflush_r+0x1c>
 8004190:	690f      	ldr	r7, [r1, #16]
 8004192:	2f00      	cmp	r7, #0
 8004194:	d0a9      	beq.n	80040ea <__sflush_r+0x1a>
 8004196:	0793      	lsls	r3, r2, #30
 8004198:	680e      	ldr	r6, [r1, #0]
 800419a:	bf08      	it	eq
 800419c:	694b      	ldreq	r3, [r1, #20]
 800419e:	600f      	str	r7, [r1, #0]
 80041a0:	bf18      	it	ne
 80041a2:	2300      	movne	r3, #0
 80041a4:	eba6 0807 	sub.w	r8, r6, r7
 80041a8:	608b      	str	r3, [r1, #8]
 80041aa:	f1b8 0f00 	cmp.w	r8, #0
 80041ae:	dd9c      	ble.n	80040ea <__sflush_r+0x1a>
 80041b0:	6a21      	ldr	r1, [r4, #32]
 80041b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041b4:	4643      	mov	r3, r8
 80041b6:	463a      	mov	r2, r7
 80041b8:	4628      	mov	r0, r5
 80041ba:	47b0      	blx	r6
 80041bc:	2800      	cmp	r0, #0
 80041be:	dc06      	bgt.n	80041ce <__sflush_r+0xfe>
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041c6:	81a3      	strh	r3, [r4, #12]
 80041c8:	f04f 30ff 	mov.w	r0, #4294967295
 80041cc:	e78e      	b.n	80040ec <__sflush_r+0x1c>
 80041ce:	4407      	add	r7, r0
 80041d0:	eba8 0800 	sub.w	r8, r8, r0
 80041d4:	e7e9      	b.n	80041aa <__sflush_r+0xda>
 80041d6:	bf00      	nop
 80041d8:	20400001 	.word	0x20400001

080041dc <_fflush_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	690b      	ldr	r3, [r1, #16]
 80041e0:	4605      	mov	r5, r0
 80041e2:	460c      	mov	r4, r1
 80041e4:	b913      	cbnz	r3, 80041ec <_fflush_r+0x10>
 80041e6:	2500      	movs	r5, #0
 80041e8:	4628      	mov	r0, r5
 80041ea:	bd38      	pop	{r3, r4, r5, pc}
 80041ec:	b118      	cbz	r0, 80041f6 <_fflush_r+0x1a>
 80041ee:	6983      	ldr	r3, [r0, #24]
 80041f0:	b90b      	cbnz	r3, 80041f6 <_fflush_r+0x1a>
 80041f2:	f7ff fa15 	bl	8003620 <__sinit>
 80041f6:	4b14      	ldr	r3, [pc, #80]	; (8004248 <_fflush_r+0x6c>)
 80041f8:	429c      	cmp	r4, r3
 80041fa:	d11b      	bne.n	8004234 <_fflush_r+0x58>
 80041fc:	686c      	ldr	r4, [r5, #4]
 80041fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0ef      	beq.n	80041e6 <_fflush_r+0xa>
 8004206:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004208:	07d0      	lsls	r0, r2, #31
 800420a:	d404      	bmi.n	8004216 <_fflush_r+0x3a>
 800420c:	0599      	lsls	r1, r3, #22
 800420e:	d402      	bmi.n	8004216 <_fflush_r+0x3a>
 8004210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004212:	f7ff faa3 	bl	800375c <__retarget_lock_acquire_recursive>
 8004216:	4628      	mov	r0, r5
 8004218:	4621      	mov	r1, r4
 800421a:	f7ff ff59 	bl	80040d0 <__sflush_r>
 800421e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004220:	07da      	lsls	r2, r3, #31
 8004222:	4605      	mov	r5, r0
 8004224:	d4e0      	bmi.n	80041e8 <_fflush_r+0xc>
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	059b      	lsls	r3, r3, #22
 800422a:	d4dd      	bmi.n	80041e8 <_fflush_r+0xc>
 800422c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800422e:	f7ff fa96 	bl	800375e <__retarget_lock_release_recursive>
 8004232:	e7d9      	b.n	80041e8 <_fflush_r+0xc>
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <_fflush_r+0x70>)
 8004236:	429c      	cmp	r4, r3
 8004238:	d101      	bne.n	800423e <_fflush_r+0x62>
 800423a:	68ac      	ldr	r4, [r5, #8]
 800423c:	e7df      	b.n	80041fe <_fflush_r+0x22>
 800423e:	4b04      	ldr	r3, [pc, #16]	; (8004250 <_fflush_r+0x74>)
 8004240:	429c      	cmp	r4, r3
 8004242:	bf08      	it	eq
 8004244:	68ec      	ldreq	r4, [r5, #12]
 8004246:	e7da      	b.n	80041fe <_fflush_r+0x22>
 8004248:	080044c4 	.word	0x080044c4
 800424c:	080044e4 	.word	0x080044e4
 8004250:	080044a4 	.word	0x080044a4

08004254 <_lseek_r>:
 8004254:	b538      	push	{r3, r4, r5, lr}
 8004256:	4d07      	ldr	r5, [pc, #28]	; (8004274 <_lseek_r+0x20>)
 8004258:	4604      	mov	r4, r0
 800425a:	4608      	mov	r0, r1
 800425c:	4611      	mov	r1, r2
 800425e:	2200      	movs	r2, #0
 8004260:	602a      	str	r2, [r5, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	f7fc fbe8 	bl	8000a38 <_lseek>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d102      	bne.n	8004272 <_lseek_r+0x1e>
 800426c:	682b      	ldr	r3, [r5, #0]
 800426e:	b103      	cbz	r3, 8004272 <_lseek_r+0x1e>
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	bd38      	pop	{r3, r4, r5, pc}
 8004274:	20000230 	.word	0x20000230

08004278 <__swhatbuf_r>:
 8004278:	b570      	push	{r4, r5, r6, lr}
 800427a:	460e      	mov	r6, r1
 800427c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004280:	2900      	cmp	r1, #0
 8004282:	b096      	sub	sp, #88	; 0x58
 8004284:	4614      	mov	r4, r2
 8004286:	461d      	mov	r5, r3
 8004288:	da08      	bge.n	800429c <__swhatbuf_r+0x24>
 800428a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	602a      	str	r2, [r5, #0]
 8004292:	061a      	lsls	r2, r3, #24
 8004294:	d410      	bmi.n	80042b8 <__swhatbuf_r+0x40>
 8004296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800429a:	e00e      	b.n	80042ba <__swhatbuf_r+0x42>
 800429c:	466a      	mov	r2, sp
 800429e:	f000 f8bb 	bl	8004418 <_fstat_r>
 80042a2:	2800      	cmp	r0, #0
 80042a4:	dbf1      	blt.n	800428a <__swhatbuf_r+0x12>
 80042a6:	9a01      	ldr	r2, [sp, #4]
 80042a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80042ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80042b0:	425a      	negs	r2, r3
 80042b2:	415a      	adcs	r2, r3
 80042b4:	602a      	str	r2, [r5, #0]
 80042b6:	e7ee      	b.n	8004296 <__swhatbuf_r+0x1e>
 80042b8:	2340      	movs	r3, #64	; 0x40
 80042ba:	2000      	movs	r0, #0
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	b016      	add	sp, #88	; 0x58
 80042c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080042c4 <__smakebuf_r>:
 80042c4:	898b      	ldrh	r3, [r1, #12]
 80042c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042c8:	079d      	lsls	r5, r3, #30
 80042ca:	4606      	mov	r6, r0
 80042cc:	460c      	mov	r4, r1
 80042ce:	d507      	bpl.n	80042e0 <__smakebuf_r+0x1c>
 80042d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042d4:	6023      	str	r3, [r4, #0]
 80042d6:	6123      	str	r3, [r4, #16]
 80042d8:	2301      	movs	r3, #1
 80042da:	6163      	str	r3, [r4, #20]
 80042dc:	b002      	add	sp, #8
 80042de:	bd70      	pop	{r4, r5, r6, pc}
 80042e0:	ab01      	add	r3, sp, #4
 80042e2:	466a      	mov	r2, sp
 80042e4:	f7ff ffc8 	bl	8004278 <__swhatbuf_r>
 80042e8:	9900      	ldr	r1, [sp, #0]
 80042ea:	4605      	mov	r5, r0
 80042ec:	4630      	mov	r0, r6
 80042ee:	f7ff fa57 	bl	80037a0 <_malloc_r>
 80042f2:	b948      	cbnz	r0, 8004308 <__smakebuf_r+0x44>
 80042f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042f8:	059a      	lsls	r2, r3, #22
 80042fa:	d4ef      	bmi.n	80042dc <__smakebuf_r+0x18>
 80042fc:	f023 0303 	bic.w	r3, r3, #3
 8004300:	f043 0302 	orr.w	r3, r3, #2
 8004304:	81a3      	strh	r3, [r4, #12]
 8004306:	e7e3      	b.n	80042d0 <__smakebuf_r+0xc>
 8004308:	4b0d      	ldr	r3, [pc, #52]	; (8004340 <__smakebuf_r+0x7c>)
 800430a:	62b3      	str	r3, [r6, #40]	; 0x28
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	6020      	str	r0, [r4, #0]
 8004310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004314:	81a3      	strh	r3, [r4, #12]
 8004316:	9b00      	ldr	r3, [sp, #0]
 8004318:	6163      	str	r3, [r4, #20]
 800431a:	9b01      	ldr	r3, [sp, #4]
 800431c:	6120      	str	r0, [r4, #16]
 800431e:	b15b      	cbz	r3, 8004338 <__smakebuf_r+0x74>
 8004320:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004324:	4630      	mov	r0, r6
 8004326:	f000 f889 	bl	800443c <_isatty_r>
 800432a:	b128      	cbz	r0, 8004338 <__smakebuf_r+0x74>
 800432c:	89a3      	ldrh	r3, [r4, #12]
 800432e:	f023 0303 	bic.w	r3, r3, #3
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	81a3      	strh	r3, [r4, #12]
 8004338:	89a0      	ldrh	r0, [r4, #12]
 800433a:	4305      	orrs	r5, r0
 800433c:	81a5      	strh	r5, [r4, #12]
 800433e:	e7cd      	b.n	80042dc <__smakebuf_r+0x18>
 8004340:	080035b9 	.word	0x080035b9

08004344 <__malloc_lock>:
 8004344:	4801      	ldr	r0, [pc, #4]	; (800434c <__malloc_lock+0x8>)
 8004346:	f7ff ba09 	b.w	800375c <__retarget_lock_acquire_recursive>
 800434a:	bf00      	nop
 800434c:	20000224 	.word	0x20000224

08004350 <__malloc_unlock>:
 8004350:	4801      	ldr	r0, [pc, #4]	; (8004358 <__malloc_unlock+0x8>)
 8004352:	f7ff ba04 	b.w	800375e <__retarget_lock_release_recursive>
 8004356:	bf00      	nop
 8004358:	20000224 	.word	0x20000224

0800435c <_free_r>:
 800435c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800435e:	2900      	cmp	r1, #0
 8004360:	d044      	beq.n	80043ec <_free_r+0x90>
 8004362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004366:	9001      	str	r0, [sp, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	f1a1 0404 	sub.w	r4, r1, #4
 800436e:	bfb8      	it	lt
 8004370:	18e4      	addlt	r4, r4, r3
 8004372:	f7ff ffe7 	bl	8004344 <__malloc_lock>
 8004376:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <_free_r+0x94>)
 8004378:	9801      	ldr	r0, [sp, #4]
 800437a:	6813      	ldr	r3, [r2, #0]
 800437c:	b933      	cbnz	r3, 800438c <_free_r+0x30>
 800437e:	6063      	str	r3, [r4, #4]
 8004380:	6014      	str	r4, [r2, #0]
 8004382:	b003      	add	sp, #12
 8004384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004388:	f7ff bfe2 	b.w	8004350 <__malloc_unlock>
 800438c:	42a3      	cmp	r3, r4
 800438e:	d908      	bls.n	80043a2 <_free_r+0x46>
 8004390:	6825      	ldr	r5, [r4, #0]
 8004392:	1961      	adds	r1, r4, r5
 8004394:	428b      	cmp	r3, r1
 8004396:	bf01      	itttt	eq
 8004398:	6819      	ldreq	r1, [r3, #0]
 800439a:	685b      	ldreq	r3, [r3, #4]
 800439c:	1949      	addeq	r1, r1, r5
 800439e:	6021      	streq	r1, [r4, #0]
 80043a0:	e7ed      	b.n	800437e <_free_r+0x22>
 80043a2:	461a      	mov	r2, r3
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	b10b      	cbz	r3, 80043ac <_free_r+0x50>
 80043a8:	42a3      	cmp	r3, r4
 80043aa:	d9fa      	bls.n	80043a2 <_free_r+0x46>
 80043ac:	6811      	ldr	r1, [r2, #0]
 80043ae:	1855      	adds	r5, r2, r1
 80043b0:	42a5      	cmp	r5, r4
 80043b2:	d10b      	bne.n	80043cc <_free_r+0x70>
 80043b4:	6824      	ldr	r4, [r4, #0]
 80043b6:	4421      	add	r1, r4
 80043b8:	1854      	adds	r4, r2, r1
 80043ba:	42a3      	cmp	r3, r4
 80043bc:	6011      	str	r1, [r2, #0]
 80043be:	d1e0      	bne.n	8004382 <_free_r+0x26>
 80043c0:	681c      	ldr	r4, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	6053      	str	r3, [r2, #4]
 80043c6:	4421      	add	r1, r4
 80043c8:	6011      	str	r1, [r2, #0]
 80043ca:	e7da      	b.n	8004382 <_free_r+0x26>
 80043cc:	d902      	bls.n	80043d4 <_free_r+0x78>
 80043ce:	230c      	movs	r3, #12
 80043d0:	6003      	str	r3, [r0, #0]
 80043d2:	e7d6      	b.n	8004382 <_free_r+0x26>
 80043d4:	6825      	ldr	r5, [r4, #0]
 80043d6:	1961      	adds	r1, r4, r5
 80043d8:	428b      	cmp	r3, r1
 80043da:	bf04      	itt	eq
 80043dc:	6819      	ldreq	r1, [r3, #0]
 80043de:	685b      	ldreq	r3, [r3, #4]
 80043e0:	6063      	str	r3, [r4, #4]
 80043e2:	bf04      	itt	eq
 80043e4:	1949      	addeq	r1, r1, r5
 80043e6:	6021      	streq	r1, [r4, #0]
 80043e8:	6054      	str	r4, [r2, #4]
 80043ea:	e7ca      	b.n	8004382 <_free_r+0x26>
 80043ec:	b003      	add	sp, #12
 80043ee:	bd30      	pop	{r4, r5, pc}
 80043f0:	20000228 	.word	0x20000228

080043f4 <_read_r>:
 80043f4:	b538      	push	{r3, r4, r5, lr}
 80043f6:	4d07      	ldr	r5, [pc, #28]	; (8004414 <_read_r+0x20>)
 80043f8:	4604      	mov	r4, r0
 80043fa:	4608      	mov	r0, r1
 80043fc:	4611      	mov	r1, r2
 80043fe:	2200      	movs	r2, #0
 8004400:	602a      	str	r2, [r5, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	f7fc fad4 	bl	80009b0 <_read>
 8004408:	1c43      	adds	r3, r0, #1
 800440a:	d102      	bne.n	8004412 <_read_r+0x1e>
 800440c:	682b      	ldr	r3, [r5, #0]
 800440e:	b103      	cbz	r3, 8004412 <_read_r+0x1e>
 8004410:	6023      	str	r3, [r4, #0]
 8004412:	bd38      	pop	{r3, r4, r5, pc}
 8004414:	20000230 	.word	0x20000230

08004418 <_fstat_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	4d07      	ldr	r5, [pc, #28]	; (8004438 <_fstat_r+0x20>)
 800441c:	2300      	movs	r3, #0
 800441e:	4604      	mov	r4, r0
 8004420:	4608      	mov	r0, r1
 8004422:	4611      	mov	r1, r2
 8004424:	602b      	str	r3, [r5, #0]
 8004426:	f7fc faec 	bl	8000a02 <_fstat>
 800442a:	1c43      	adds	r3, r0, #1
 800442c:	d102      	bne.n	8004434 <_fstat_r+0x1c>
 800442e:	682b      	ldr	r3, [r5, #0]
 8004430:	b103      	cbz	r3, 8004434 <_fstat_r+0x1c>
 8004432:	6023      	str	r3, [r4, #0]
 8004434:	bd38      	pop	{r3, r4, r5, pc}
 8004436:	bf00      	nop
 8004438:	20000230 	.word	0x20000230

0800443c <_isatty_r>:
 800443c:	b538      	push	{r3, r4, r5, lr}
 800443e:	4d06      	ldr	r5, [pc, #24]	; (8004458 <_isatty_r+0x1c>)
 8004440:	2300      	movs	r3, #0
 8004442:	4604      	mov	r4, r0
 8004444:	4608      	mov	r0, r1
 8004446:	602b      	str	r3, [r5, #0]
 8004448:	f7fc faeb 	bl	8000a22 <_isatty>
 800444c:	1c43      	adds	r3, r0, #1
 800444e:	d102      	bne.n	8004456 <_isatty_r+0x1a>
 8004450:	682b      	ldr	r3, [r5, #0]
 8004452:	b103      	cbz	r3, 8004456 <_isatty_r+0x1a>
 8004454:	6023      	str	r3, [r4, #0]
 8004456:	bd38      	pop	{r3, r4, r5, pc}
 8004458:	20000230 	.word	0x20000230

0800445c <_init>:
 800445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445e:	bf00      	nop
 8004460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004462:	bc08      	pop	{r3}
 8004464:	469e      	mov	lr, r3
 8004466:	4770      	bx	lr

08004468 <_fini>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	bf00      	nop
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr
